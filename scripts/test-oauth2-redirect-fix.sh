#!/bin/bash
# Test script for OAuth2 redirect URL fix functionality

set -euo pipefail

echo "=== Testing OAuth2 Redirect URL Fix ==="

# Change to script directory
cd "$(dirname "$0")"

# Test 1: Validate YAML syntax
echo "Test 1: Validating YAML syntax..."
if python3 -c "
import yaml
import sys

try:
    with open('../infrastructure/authentik-proxy/fix-oauth2-redirect-urls-job.yaml', 'r') as f:
        yaml_content = yaml.safe_load(f)
    print('âœ“ YAML syntax is valid')
    print(f'âœ“ Job name: {yaml_content.get(\"metadata\", {}).get(\"name\")}')
    print(f'âœ“ Namespace: {yaml_content.get(\"metadata\", {}).get(\"namespace\")}')
except Exception as e:
    print(f'âœ— YAML validation failed: {e}')
    sys.exit(1)
"; then
    echo "âœ“ YAML validation passed"
else
    echo "âœ— YAML validation failed"
    exit 1
fi

# Test 2: Validate embedded Python script syntax
echo "Test 2: Validating embedded Python script syntax..."
if python3 -c "
import ast
import sys

# Read the YAML file and extract the Python script
with open('../infrastructure/authentik-proxy/fix-oauth2-redirect-urls-job.yaml', 'r') as f:
    content = f.read()

# Find the Python script between the EOF markers
start_marker = \"cat > /tmp/fix_oauth2_redirects.py << 'EOF'\"
end_marker = 'EOF'

start_idx = content.find(start_marker)
if start_idx == -1:
    print('ERROR: Could not find start marker')
    sys.exit(1)

start_idx = content.find('\n', start_idx) + 1
end_idx = content.find(end_marker, start_idx)
if end_idx == -1:
    print('ERROR: Could not find end marker')
    sys.exit(1)

python_script = content[start_idx:end_idx].strip()

# Remove the common indentation (14 spaces)
lines = python_script.split('\n')
cleaned_lines = []
for line in lines:
    if line.strip():  # Non-empty line
        if line.startswith('              '):  # Remove 14 spaces
            cleaned_lines.append(line[14:])
        else:
            cleaned_lines.append(line)
    else:  # Empty line
        cleaned_lines.append('')

# Join and test syntax
python_code = '\n'.join(cleaned_lines)

try:
    ast.parse(python_code)
    print('âœ“ Python script syntax is valid')
    print(f'âœ“ Script contains {len(lines)} lines')
except SyntaxError as e:
    print(f'âœ— Python script syntax error: {e}')
    sys.exit(1)
"; then
    echo "âœ“ Python script syntax validation passed"
else
    echo "âœ— Python script syntax validation failed"
    exit 1
fi

# Test 3: Run pytest tests
echo "Test 3: Running pytest tests..."
if command -v pytest >/dev/null 2>&1; then
    cd ../tests/authentik-proxy-config
    if pytest test_oauth2_redirect_fix.py -v; then
        echo "âœ“ Pytest tests passed"
    else
        echo "âœ— Pytest tests failed"
        exit 1
    fi
    cd - >/dev/null
else
    echo "âš  pytest not available, skipping unit tests"
fi

# Test 4: Check if kubectl can validate the job
echo "Test 4: Validating Kubernetes Job with kubectl..."
if command -v kubectl >/dev/null 2>&1; then
    if kubectl --dry-run=client apply -f ../infrastructure/authentik-proxy/fix-oauth2-redirect-urls-job.yaml >/dev/null 2>&1; then
        echo "âœ“ Kubernetes Job validation passed"
    else
        echo "âœ— Kubernetes Job validation failed"
        exit 1
    fi
else
    echo "âš  kubectl not available, skipping Kubernetes validation"
fi

# Test 5: Check if the job is included in kustomization
echo "Test 5: Checking kustomization.yaml includes the job..."
if grep -q "fix-oauth2-redirect-urls-job.yaml" ../infrastructure/authentik-proxy/kustomization.yaml; then
    echo "âœ“ Job is included in kustomization.yaml"
else
    echo "âœ— Job is not included in kustomization.yaml"
    exit 1
fi

echo ""
echo "=== Test Summary ==="
echo "âœ“ YAML syntax validation passed"
echo "âœ“ Python script syntax validation passed"
echo "âœ“ Unit tests completed"
echo "âœ“ Kubernetes validation passed"
echo "âœ“ Kustomization validation passed"
echo ""
echo "All OAuth2 redirect fix tests passed! ðŸŽ‰"
echo ""
echo "The OAuth2 redirect URL fix is ready for deployment."