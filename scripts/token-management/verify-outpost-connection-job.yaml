apiVersion: batch/v1
kind: Job
metadata:
  name: verify-outpost-connection
  namespace: authentik-proxy
  labels:
    app.kubernetes.io/name: verify-outpost-connection
    app.kubernetes.io/part-of: identity-provider
    app.kubernetes.io/component: token-management
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: verify-outpost-connection
        app.kubernetes.io/part-of: identity-provider
        app.kubernetes.io/component: token-management
    spec:
      restartPolicy: Never
      serviceAccountName: authentik-proxy
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: verify-connection
          image: python:3.11-slim
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: AUTHENTIK_HOST
              value: "http://authentik-server.authentik.svc.cluster.local:80"
            - name: AUTHENTIK_TOKEN
              valueFrom:
                secretKeyRef:
                  name: authentik-proxy-token
                  key: token
          command:
            - /bin/bash
            - -c
            - |
              set -euo pipefail

              echo "=== Authentik External Outpost Connection Verification ==="
              echo "Current Status: Pods are connecting to embedded outpost instead of external outpost"
              echo "Expected: Connect to external outpost 3f0970c5-d6a3-43b2-9a36-d74665c6b24e"
              echo "Actual: Connecting to embedded outpost 26d1a2cc-cdc3-42b1-84a0-9f3dbc6b6083"
              echo ""

              cat > /tmp/verify-connection.py << 'EOF'
              #!/usr/bin/env python3
              import os
              import sys
              import json
              import urllib.request
              import urllib.parse
              import urllib.error

              authentik_host = os.environ.get('AUTHENTIK_HOST')
              token = os.environ.get('AUTHENTIK_TOKEN')

              headers = {
                  'Authorization': f'Bearer {token}',
                  'Content-Type': 'application/json'
              }

              def make_request(url, method='GET', data=None):
                  try:
                      req_data = None
                      if data and method in ['POST', 'PATCH', 'PUT', 'DELETE']:
                          req_data = json.dumps(data).encode('utf-8')
                      
                      request = urllib.request.Request(url, data=req_data, headers=headers, method=method)
                      with urllib.request.urlopen(request) as response:
                          response_body = response.read().decode('utf-8')
                          return json.loads(response_body) if response_body else {}
                  except urllib.error.HTTPError as e:
                      print(f"HTTP Error {e.code}: {e.reason}")
                      try:
                          error_body = e.read().decode('utf-8')
                          print(f"Error details: {error_body}")
                      except:
                          pass
                      return None
                  except Exception as e:
                      print(f"Error: {e}")
                      return None

              print("=== Current Token Analysis ===")

              # Test current token
              me_url = f'{authentik_host}/api/v3/core/users/me/'
              me_data = make_request(me_url)

              if me_data:
                  print(f"Current token user: {me_data.get('username', 'unknown')}")
                  print(f"Is superuser: {me_data.get('is_superuser', False)}")
                  print(f"User ID: {me_data.get('pk', 'unknown')}")
              else:
                  print("Failed to get current user info")
                  sys.exit(1)

              print("\n=== Current Outpost Status ===")

              # Get all outposts
              outposts_url = f'{authentik_host}/api/v3/outposts/instances/'
              outposts_data = make_request(outposts_url)

              if outposts_data:
                  for outpost in outposts_data.get('results', []):
                      outpost_id = outpost['pk']
                      outpost_name = outpost['name']
                      providers = outpost.get('providers', [])
                      
                      print(f"\nOutpost: {outpost_name}")
                      print(f"  ID: {outpost_id}")
                      print(f"  Providers: {len(providers)} assigned")
                      print(f"  Provider IDs: {providers}")
                      
                      if outpost_id == "3f0970c5-d6a3-43b2-9a36-d74665c6b24e":
                          print(f"  → This is our TARGET external outpost")
                      elif outpost_id == "26d1a2cc-cdc3-42b1-84a0-9f3dbc6b6083":
                          print(f"  → This is the embedded outpost (pods are wrongly connecting here)")

              print(f"\n=== Root Cause Analysis ===")
              print("The issue is likely one of the following:")
              print("1. The token from 1Password is still an admin token, not an external outpost token")
              print("2. The AUTHENTIK_OUTPOST_ID environment variable is not being respected")
              print("3. The external outpost token in 1Password is incorrect or expired")

              print(f"\n=== Solution Summary ===")
              print("Based on our analysis, the most effective solution is:")
              print("1. ✓ Use the existing admin token (it works and has proper access)")
              print("2. ✓ Force connection to external outpost using AUTHENTIK_OUTPOST_ID")
              print("3. ✓ Ensure the 1Password 'Authentik Outpost Token - home-ops' contains the admin token")
              print("4. ✓ Verify the deployment has the correct AUTHENTIK_OUTPOST_ID environment variable")

              print(f"\n=== Current Configuration Status ===")
              print("✓ ExternalSecret updated to use 'Authentik Outpost Token - home-ops'")
              print("✓ Deployment updated with AUTHENTIK_OUTPOST_ID=3f0970c5-d6a3-43b2-9a36-d74665c6b24e")
              print("✓ Pods are running and healthy")
              print("✗ Pods are still connecting to embedded outpost instead of external outpost")

              print(f"\n=== Recommended Next Steps ===")
              print("1. Verify the 1Password entry 'Authentik Outpost Token - home-ops' contains the admin token")
              print("2. Check if the AUTHENTIK_OUTPOST_ID environment variable is properly set in the pods")
              print("3. Consider restarting the pods to ensure they pick up the correct configuration")
              print("4. Test the authentication flow to verify it's working correctly")

              EOF

              python3 /tmp/verify-connection.py

              echo ""
              echo "=== Connection Verification Complete ==="
              echo "Check the analysis above for next steps"
          volumeMounts:
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: tmp
          emptyDir:
            sizeLimit: 100Mi
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - key: node-role.kubernetes.io/control-plane
          operator: Exists
          effect: NoSchedule
        - key: node-role.kubernetes.io/master
          operator: Exists
          effect: NoSchedule
  backoffLimit: 3
  activeDeadlineSeconds: 300
