apiVersion: batch/v1
kind: Job
metadata:
  name: regenerate-outpost-tokens
  namespace: authentik-proxy
  labels:
    app.kubernetes.io/name: regenerate-outpost-tokens
    app.kubernetes.io/part-of: identity-provider
    app.kubernetes.io/component: token-management
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: regenerate-outpost-tokens
        app.kubernetes.io/part-of: identity-provider
        app.kubernetes.io/component: token-management
    spec:
      restartPolicy: Never
      serviceAccountName: authentik-proxy
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: regenerate-tokens
          image: python:3.11-slim
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: AUTHENTIK_HOST
              value: "http://authentik-server.authentik.svc.cluster.local:80"
            - name: AUTHENTIK_ADMIN_TOKEN
              valueFrom:
                secretKeyRef:
                  name: authentik-proxy-token
                  key: token
          command:
            - /bin/bash
            - -c
            - |
              set -euo pipefail
              
              echo "=== Authentik External Outpost Token Regeneration ==="
              
              cat > /tmp/regenerate-tokens.py << 'EOF'
              #!/usr/bin/env python3
              import os
              import sys
              import json
              import urllib.request
              import urllib.parse
              import urllib.error
              
              authentik_host = os.environ.get('AUTHENTIK_HOST')
              admin_token = os.environ.get('AUTHENTIK_ADMIN_TOKEN')
              
              headers = {
                  'Authorization': f'Bearer {admin_token}',
                  'Content-Type': 'application/json'
              }
              
              def make_request(url, method='GET', data=None):
                  try:
                      req_data = None
                      if data and method in ['POST', 'PATCH', 'PUT', 'DELETE']:
                          req_data = json.dumps(data).encode('utf-8')
                      
                      request = urllib.request.Request(url, data=req_data, headers=headers, method=method)
                      with urllib.request.urlopen(request) as response:
                          response_body = response.read().decode('utf-8')
                          return json.loads(response_body) if response_body else {}
                  except urllib.error.HTTPError as e:
                      print(f"HTTP Error {e.code}: {e.reason}")
                      try:
                          error_body = e.read().decode('utf-8')
                          print(f"Error details: {error_body}")
                      except:
                          pass
                      return None
                  except Exception as e:
                      print(f"Error: {e}")
                      return None
              
              # Target outpost token identifiers
              target_tokens = {
                  "ak-outpost-3f0970c5-d6a3-43b2-9a36-d74665c6b24e-api": {
                      "outpost_id": "3f0970c5-d6a3-43b2-9a36-d74665c6b24e",
                      "outpost_name": "k8s-external-proxy-outpost",
                      "onepassword_entry": "Authentik External Outpost Token - k8s-external-proxy-outpost"
                  },
                  "ak-outpost-9d94c493-d7bb-47b4-aae9-d579c69b2ea5-api": {
                      "outpost_id": "9d94c493-d7bb-47b4-aae9-d579c69b2ea5",
                      "outpost_name": "radius-outpost",
                      "onepassword_entry": "Authentik External Outpost Token - radius-outpost"
                  }
              }
              
              print("=== Finding Current Tokens ===")
              tokens_url = f'{authentik_host}/api/v3/core/tokens/'
              tokens_data = make_request(tokens_url)
              
              if not tokens_data:
                  print("Failed to fetch tokens")
                  sys.exit(1)
              
              current_tokens = {}
              for token in tokens_data.get('results', []):
                  identifier = token.get('identifier', '')
                  if identifier in target_tokens:
                      current_tokens[identifier] = token
                      print(f"Found current token: {identifier} (PK: {token['pk']})")
              
              print(f"\nFound {len(current_tokens)} target tokens to regenerate")
              
              regenerated_tokens = {}
              
              for token_identifier, token_info in target_tokens.items():
                  print(f"\n=== Processing {token_info['outpost_name']} ===")
                  
                  if token_identifier not in current_tokens:
                      print(f"Warning: Token {token_identifier} not found, skipping")
                      continue
                  
                  current_token = current_tokens[token_identifier]
                  token_pk = current_token['pk']
                  
                  print(f"Current token PK: {token_pk}")
                  print(f"Outpost ID: {token_info['outpost_id']}")
                  
                  # Delete the current token
                  print("Deleting current token...")
                  delete_url = f'{authentik_host}/api/v3/core/tokens/{token_pk}/'
                  delete_result = make_request(delete_url, method='DELETE')
                  
                  if delete_result is not None:
                      print("✓ Current token deleted successfully")
                  else:
                      print("✗ Failed to delete current token")
                      continue
                  
                  # Create a new token for the outpost
                  print("Creating new token...")
                  create_data = {
                      'identifier': token_identifier,
                      'description': f'Autogenerated by authentik for Outpost {token_info["outpost_name"]}',
                      'intent': 'api',
                      'user': current_token['user'],  # Use same user as before
                      'expiring': False
                  }
                  
                  create_url = f'{authentik_host}/api/v3/core/tokens/'
                  new_token = make_request(create_url, method='POST', data=create_data)
                  
                  if new_token and 'key' in new_token:
                      token_key = new_token['key']
                      print(f"✓ New token created successfully")
                      print(f"  New PK: {new_token['pk']}")
                      print(f"  Token: {token_key[:20]}... (truncated)")
                      
                      regenerated_tokens[token_identifier] = {
                          'outpost_id': token_info['outpost_id'],
                          'outpost_name': token_info['outpost_name'],
                          'onepassword_entry': token_info['onepassword_entry'],
                          'token_pk': new_token['pk'],
                          'token_key': token_key,
                          'token_identifier': token_identifier
                      }
                  else:
                      print("✗ Failed to create new token")
                      if new_token:
                          print(f"Response: {new_token}")
              
              print(f"\n=== Regeneration Complete ===")
              print(f"Successfully regenerated {len(regenerated_tokens)} tokens")
              
              # Save results for 1Password update
              results = {
                  'regenerated_tokens': regenerated_tokens,
                  'timestamp': '2025-07-26T12:35:00Z'
              }
              
              output_file = '/tmp/regenerated-outpost-tokens.json'
              with open(output_file, 'w') as f:
                  json.dump(results, f, indent=2)
              
              print(f"✓ Results saved to: {output_file}")
              
              # Print 1Password update instructions
              print("\n=== 1Password Update Instructions ===")
              for token_identifier, token_data in regenerated_tokens.items():
                  print(f"\n1Password Entry: {token_data['onepassword_entry']}")
                  print(f"  Field 'token': {token_data['token_key']}")
                  print(f"  Field 'outpost_id': {token_data['outpost_id']}")
                  print(f"  Field 'outpost_name': {token_data['outpost_name']}")
                  print(f"  Field 'authentik_host': {authentik_host}")
              
              print(f"\n=== Summary ===")
              print("The following tokens have been regenerated and are ready for 1Password:")
              for token_data in regenerated_tokens.values():
                  print(f"  - {token_data['outpost_name']}: {token_data['token_key'][:20]}...")
              
              EOF
              
              python3 /tmp/regenerate-tokens.py
              
              echo "=== Token regeneration completed ==="
              echo "Check the logs above for the new token values"
              
              # Keep the results available for inspection
              if [ -f /tmp/regenerated-outpost-tokens.json ]; then
                echo "=== Regeneration Results File ==="
                cat /tmp/regenerated-outpost-tokens.json
              fi
          volumeMounts:
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: tmp
          emptyDir:
            sizeLimit: 100Mi
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - key: node-role.kubernetes.io/control-plane
          operator: Exists
          effect: NoSchedule
        - key: node-role.kubernetes.io/master
          operator: Exists
          effect: NoSchedule
  backoffLimit: 3
  activeDeadlineSeconds: 600