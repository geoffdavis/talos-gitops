apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: kubernetes-dashboard
  namespace: kubernetes-dashboard
spec:
  interval: 30m
  chart:
    spec:
      chart: kubernetes-dashboard
      version: "7.13.0"
      sourceRef:
        kind: HelmRepository
        name: kubernetes-dashboard
        namespace: flux-system
      interval: 12h
  values:
    app:
      # Disable direct ingress access (use Kong proxy instead)
      ingress:
        enabled: false

    # Disable nginx (Kong will handle routing)
    nginx:
      enabled: false

    # Disable cert-manager (handled by Kong ingress)
    cert-manager:
      enabled: false

    # Disable metrics-server (already deployed separately)
    metrics-server:
      enabled: false

    # Enable Kong as required proxy with authentication
    kong:
      enabled: true
      # Use custom Kong configuration with proper service discovery and authentication
      env:
        database: "off"
        declarative_config: "/kong-config/kong.yml"
        log_level: "info"
        plugins: "bundled,request-transformer,response-transformer,cors"
        dns_resolver: "10.96.0.10" # Kubernetes cluster DNS
        dns_order: "LAST,A,CNAME"
      # Mount processed Kong configuration
      extraConfigMaps:
        - name: kubernetes-dashboard-kong-config
          mountPath: /kong-config
      # Add init container for Kong configuration processing
      initContainers:
        - name: kong-config-processor
          image: alpine/k8s:1.31.1
          imagePullPolicy: IfNotPresent
          serviceAccountName: kubernetes-dashboard-viewer # Use viewer SA with proper permissions
          securityContext:
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/sh
            - -c
            - |
              set -e
              echo "Processing Kong configuration with kubernetes-dashboard-viewer service account token..."

              # Read the viewer service account token
              SA_TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
              echo "Using kubernetes-dashboard-viewer token, length: ${#SA_TOKEN}"

              # Process Kong configuration template
              sed "s/\$(SA_TOKEN)/$SA_TOKEN/g" /tmp/kong-config/kong.yml > /processed-config/kong.yml

              # Create processed ConfigMap
              echo "Creating processed ConfigMap with viewer permissions..."
              kubectl delete configmap kubernetes-dashboard-kong-config --ignore-not-found=true
              kubectl create configmap kubernetes-dashboard-kong-config --from-file=kong.yml=/processed-config/kong.yml

              echo "Kong configuration ConfigMap updated with viewer token successfully"
              echo "Configuration file size: $(wc -c < /processed-config/kong.yml) bytes"
          volumeMounts:
            - name: kong-config-template
              mountPath: /tmp/kong-config
              readOnly: true
            - name: processed-config
              mountPath: /processed-config
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "128Mi"
              cpu: "100m"
      # Add volumes for init container
      extraVolumes:
        - name: kong-config-template
          configMap:
            name: kubernetes-dashboard-kong-config-template
        - name: processed-config
          emptyDir: {}
      # Kong proxy configuration
      proxy:
        tls:
          servicePort: 8443
        # Enable Kong ingress for external access
        ingress:
          enabled: true
          ingressClassName: nginx-internal
          annotations:
            cert-manager.io/cluster-issuer: letsencrypt-prod
            nginx.ingress.kubernetes.io/ssl-redirect: "true"
            nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
            nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
            # External DNS annotations for DNS record creation
            external-dns.alpha.kubernetes.io/hostname: "dashboard.k8s.home.geoffdavis.com"
            external-dns.alpha.kubernetes.io/ttl: "300"
            # Kong handles authentication internally - no nginx external auth needed
          hosts:
            - host: dashboard.k8s.home.geoffdavis.com
              paths:
                - path: /
                  pathType: Prefix
          tls:
            - secretName: dashboard-tls # pragma: allowlist secret
              hosts:
                - dashboard.k8s.home.geoffdavis.com

    # Configure the dashboard API for header-based authentication
    api:
      containers:
        args:
          - --namespace=kubernetes-dashboard
          - --metrics-scraper-service-name=kubernetes-dashboard-metrics-scraper
        resources:
          requests:
            cpu: 100m
            memory: 200Mi
          limits:
            cpu: 200m
            memory: 400Mi

      nodeSelector:
        kubernetes.io/os: linux

      tolerations:
        - key: node-role.kubernetes.io/control-plane
          operator: Exists
          effect: NoSchedule
        - key: node-role.kubernetes.io/master
          operator: Exists
          effect: NoSchedule

    # Configure web frontend for header-based authentication
    web:
      containers:
        env:
          - name: KUBERNETES_DASHBOARD_API_URL
            value: "/api"
        args:
          - --settings-config-map-name=kubernetes-dashboard-settings
        resources:
          requests:
            cpu: 100m
            memory: 200Mi
          limits:
            cpu: 200m
            memory: 400Mi

      nodeSelector:
        kubernetes.io/os: linux

      tolerations:
        - key: node-role.kubernetes.io/control-plane
          operator: Exists
          effect: NoSchedule
        - key: node-role.kubernetes.io/master
          operator: Exists
          effect: NoSchedule
