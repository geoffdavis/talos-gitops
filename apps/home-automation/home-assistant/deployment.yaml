---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: home-assistant
  namespace: home-automation
  labels:
    app.kubernetes.io/name: home-assistant
    app.kubernetes.io/component: home-automation-core
    app.kubernetes.io/part-of: home-automation-stack
    app.kubernetes.io/version: "2025.7"
spec:
  replicas: 1
  strategy:
    type: Recreate # Single replica with persistent storage
  selector:
    matchLabels:
      app.kubernetes.io/name: home-assistant
      app.kubernetes.io/component: home-automation-core
  template:
    metadata:
      labels:
        app.kubernetes.io/name: home-assistant
        app.kubernetes.io/component: home-automation-core
        app.kubernetes.io/part-of: home-automation-stack
        app.kubernetes.io/version: "2025.7"
      annotations: {}
    spec:
      # Security context - Home Assistant needs root for s6-overlay init
      securityContext:
        fsGroup: 1000 # Keep fsGroup for volume permissions
        runAsNonRoot: false # Allow root for s6-overlay init system
        seccompProfile:
          type: RuntimeDefault

      # Node scheduling preferences
      nodeSelector:
        kubernetes.io/os: linux

      tolerations:
        - key: "node-role.kubernetes.io/control-plane"
          operator: "Exists"
          effect: "NoSchedule"
        - key: "node-role.kubernetes.io/master"
          operator: "Exists"
          effect: "NoSchedule"

      # Init containers for dependency readiness
      initContainers:
        # Database readiness init container
        - name: wait-for-database
          image: postgres:17.5-alpine
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: true
            runAsUser: 999
            runAsGroup: 999
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: PGHOST
              value: "postgresql-cluster-rw.postgresql-system.svc.cluster.local"
            - name: PGPORT
              value: "5432"
            - name: PGDATABASE
              value: "postgres"
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: postgresql-superuser-credentials
                  key: username
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgresql-superuser-credentials
                  key: password
            - name: APP_DB_USER
              valueFrom:
                secretKeyRef:
                  name: homeassistant-database-credentials
                  key: username
            - name: APP_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: homeassistant-database-credentials
                  key: password
            - name: PGSSLMODE
              value: "require"
            - name: TARGET_DATABASE
              value: "homeassistant"
          command:
            - /bin/sh
            - -c
            - |
              set -e
              echo "Waiting for PostgreSQL cluster to be ready..."

              # Function to execute SQL with retry
              execute_sql() {
                local sql="$1"
                local max_attempts=30
                local attempt=1

                while [ $attempt -le $max_attempts ]; do
                  echo "Attempt $attempt: Testing database connectivity..."
                  if psql -c "$sql" >/dev/null 2>&1; then
                    echo "Database is ready!"
                    return 0
                  else
                    echo "Database not ready, waiting 10 seconds..."
                    sleep 10
                    attempt=$((attempt + 1))
                  fi
                done

                echo "Database failed to become ready after $max_attempts attempts"
                return 1
              }

              # Wait for database to be ready
              execute_sql "SELECT 1;"

              # Initialize database if needed
              echo "Initializing database: ${TARGET_DATABASE} for Home Assistant"

              # Check if database exists
              DB_EXISTS=$(psql -tAc "SELECT 1 FROM pg_database WHERE datname='${TARGET_DATABASE}';" || echo "0")

              if [ "$DB_EXISTS" != "1" ]; then
                echo "Creating ${TARGET_DATABASE} database..."
                execute_sql "CREATE DATABASE ${TARGET_DATABASE} OWNER ${APP_DB_USER};"
                echo "Database created successfully"
              else
                echo "Database ${TARGET_DATABASE} already exists"
              fi

              # Check if user exists
              USER_EXISTS=$(psql -tAc "SELECT 1 FROM pg_roles WHERE rolname='${APP_DB_USER}';" || echo "0")

              if [ "$USER_EXISTS" != "1" ]; then
                echo "Creating ${APP_DB_USER} user..."
                execute_sql "CREATE USER ${APP_DB_USER} WITH PASSWORD '${APP_DB_PASSWORD}';"
                echo "User created successfully"
              else
                echo "User ${APP_DB_USER} already exists"
                echo "Updating password..."
                execute_sql "ALTER USER ${APP_DB_USER} WITH PASSWORD '${APP_DB_PASSWORD}';"
              fi

              # Grant permissions
              echo "Granting permissions..."
              execute_sql "GRANT ALL PRIVILEGES ON DATABASE ${TARGET_DATABASE} TO ${APP_DB_USER};"
              execute_sql "GRANT ${APP_DB_USER} TO postgres;"

              # Connect to the target database and grant schema permissions
              echo "Granting schema permissions..."
              PGDATABASE=${TARGET_DATABASE} psql -c "GRANT ALL ON SCHEMA public TO ${APP_DB_USER};" || true
              PGDATABASE=${TARGET_DATABASE} psql \
                -c "GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO ${APP_DB_USER};" || true
              PGDATABASE=${TARGET_DATABASE} psql \
                -c "GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO ${APP_DB_USER};" || true
              PGDATABASE=${TARGET_DATABASE} psql \
                -c "ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO ${APP_DB_USER};" || true
              PGDATABASE=${TARGET_DATABASE} psql \
                -c "ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO ${APP_DB_USER};" || true

              echo "Database initialization completed successfully for Home Assistant"
          volumeMounts:
            - name: tmp
              mountPath: /tmp
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "128Mi"
              cpu: "100m"

        # MQTT broker readiness init container
        - name: wait-for-mqtt
          image: busybox:1.37-musl
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/sh
            - -c
            - |
              set -e
              echo "Waiting for MQTT broker to be ready..."

              MQTT_HOST="mosquitto.home-automation.svc.cluster.local"
              MQTT_PORT="1883"
              MAX_ATTEMPTS=30
              ATTEMPT=1

              while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
                echo "Attempt $ATTEMPT: Testing MQTT broker connectivity..."
                if nc -z -w5 "$MQTT_HOST" "$MQTT_PORT"; then
                  echo "MQTT broker is ready!"
                  exit 0
                else
                  echo "MQTT broker not ready, waiting 10 seconds..."
                  sleep 10
                  ATTEMPT=$((ATTEMPT + 1))
                fi
              done

              echo "MQTT broker failed to become ready after $MAX_ATTEMPTS attempts"
              exit 1
          resources:
            requests:
              memory: "16Mi"
              cpu: "10m"
            limits:
              memory: "32Mi"
              cpu: "50m"

        # Redis readiness init container
        - name: wait-for-redis
          image: redis:7.4-alpine
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: true
            runAsUser: 999
            runAsGroup: 999
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/sh
            - -c
            - |
              set -e
              echo "Waiting for Redis to be ready..."

              REDIS_HOST="redis.home-automation.svc.cluster.local"
              REDIS_PORT="6379"
              MAX_ATTEMPTS=30
              ATTEMPT=1

              while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
                echo "Attempt $ATTEMPT: Testing Redis connectivity..."
                if redis-cli -h "$REDIS_HOST" -p "$REDIS_PORT" ping | grep -q "PONG"; then
                  echo "Redis is ready!"
                  exit 0
                else
                  echo "Redis not ready, waiting 10 seconds..."
                  sleep 10
                  ATTEMPT=$((ATTEMPT + 1))
                fi
              done

              echo "Redis failed to become ready after $MAX_ATTEMPTS attempts"
              exit 1
          volumeMounts:
            - name: tmp
              mountPath: /tmp
          resources:
            requests:
              memory: "16Mi"
              cpu: "10m"
            limits:
              memory: "32Mi"
              cpu: "50m"

        # Configuration setup init container
        - name: setup-config
          image: busybox:1.37-musl
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: false
            runAsUser: 0
            runAsGroup: 0
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
              add:
                - CHOWN
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/sh
            - -c
            - |
              set -e
              echo "Setting up Home Assistant configuration..."
              # Copy the proper configuration.yaml from ConfigMap to persistent volume
              if [ -f "/tmp/config-template/configuration.yaml" ]; then
                echo "Copying configuration.yaml from ConfigMap..."
                cp /tmp/config-template/configuration.yaml /config/configuration.yaml
                chown 1000:1000 /config/configuration.yaml
                echo "Configuration updated successfully"
              else
                echo "ConfigMap configuration not found, using existing configuration"
              fi
          volumeMounts:
            - name: home-assistant-config
              mountPath: /config
            - name: home-assistant-configuration
              mountPath: /tmp/config-template
            - name: tmp
              mountPath: /tmp
          resources:
            requests:
              memory: "16Mi"
              cpu: "10m"
            limits:
              memory: "32Mi"
              cpu: "50m"

      containers:
        - name: home-assistant
          image: ghcr.io/home-assistant/home-assistant:2025.10
          imagePullPolicy: IfNotPresent

          # Container security context - Home Assistant needs root for s6-overlay
          securityContext:
            privileged: true # Required for s6-overlay init system to work properly
            allowPrivilegeEscalation: true # Required for s6-overlay init system
            readOnlyRootFilesystem: false # Home Assistant needs to write to config
            runAsUser: 0 # Run as root for s6-overlay init system
            capabilities:
              drop:
                - ALL
              add:
                - SETUID # Required for s6-overlay suexec functionality
                - SETGID # Required for s6-overlay group management

          # Resource limits appropriate for Home Assistant workload
          resources:
            requests:
              cpu: 500m
              memory: 1Gi
            limits:
              cpu: 2000m
              memory: 4Gi

          # Home Assistant web interface port
          ports:
            - name: http
              containerPort: 8123
              protocol: TCP

          # Environment variables for Home Assistant
          env:
            # Database configuration
            - name: POSTGRES_HOST
              value: "postgresql-cluster-rw.postgresql-system.svc.cluster.local"
            - name: POSTGRES_PORT
              value: "5432"
            - name: POSTGRES_DB
              value: "homeassistant"
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: homeassistant-database-credentials
                  key: username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: homeassistant-database-credentials
                  key: password
            - name: POSTGRES_DB_URL
              valueFrom:
                secretKeyRef:
                  name: home-assistant-secrets
                  key: postgres_db_url

            # MQTT configuration
            - name: MQTT_HOST
              value: "mosquitto.home-automation.svc.cluster.local"
            - name: MQTT_PORT
              value: "1883"
            - name: MQTT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: home-assistant-secrets
                  key: mqtt_username
            - name: MQTT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: home-assistant-secrets
                  key: mqtt_password

            # Redis configuration
            - name: REDIS_HOST
              value: "redis.home-automation.svc.cluster.local"
            - name: REDIS_PORT
              value: "6379"

            # Home Assistant specific configuration
            - name: TZ
              value: "America/New_York"
            - name: HASS_HTTP_TRUSTED_PROXY_1
              value: "10.244.0.0/16" # Pod CIDR for Authentik proxy
            - name: HASS_HTTP_TRUSTED_PROXY_2
              value: "172.29.51.0/24" # Management network
            - name: HASS_HTTP_USE_X_FORWARDED_FOR
              value: "true"

            # Location configuration from secrets
            - name: HOME_LATITUDE
              valueFrom:
                secretKeyRef:
                  name: home-assistant-secrets
                  key: home_latitude
            - name: HOME_LONGITUDE
              valueFrom:
                secretKeyRef:
                  name: home-assistant-secrets
                  key: home_longitude
            - name: HOME_ELEVATION
              valueFrom:
                secretKeyRef:
                  name: home-assistant-secrets
                  key: home_elevation

          # Volume mounts
          volumeMounts:
            - name: home-assistant-config
              mountPath: /config
            - name: tmp
              mountPath: /tmp

          # Health checks
          livenessProbe:
            httpGet:
              path: /
              port: http
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3

          readinessProbe:
            httpGet:
              path: /
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3

          startupProbe:
            httpGet:
              path: /
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 30

      volumes:
        - name: home-assistant-config
          persistentVolumeClaim:
            claimName: home-assistant-config
        - name: tmp
          emptyDir:
            sizeLimit: 1Gi
        - name: home-assistant-configuration
          configMap:
            name: home-assistant-configuration
