---
apiVersion: batch/v1
kind: Job
metadata:
  name: home-assistant-proxy-config
  namespace: home-automation
  labels:
    app.kubernetes.io/name: home-assistant
    app.kubernetes.io/component: authentik-proxy-config
    app.kubernetes.io/part-of: home-automation-stack
spec:
  backoffLimit: 2
  activeDeadlineSeconds: 300
  template:
    metadata:
      labels:
        app.kubernetes.io/name: home-assistant-proxy-config
    spec:
      restartPolicy: OnFailure
      serviceAccountName: default
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: configure-proxy
          image: python:3.12-slim
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: AUTHENTIK_HOST
              value: "http://authentik-server.authentik.svc.cluster.local:80"
            - name: AUTHENTIK_TOKEN
              valueFrom:
                secretKeyRef:
                  name: authentik-proxy-token
                  key: token
            - name: EXTERNAL_OUTPOST_ID
              value: "3f0970c5-d6a3-43b2-9a36-d74665c6b24e"
          command:
            - /bin/sh
            - -c
            - |
              set -e
              echo "=== Creating Home Assistant Proxy Configuration Script ==="
              cat > /tmp/configure_home_assistant_proxy.py << 'EOF'
              #!/usr/bin/env python3
              """
              Home Assistant Authentik Proxy Configuration Script

              This script configures the Home Assistant proxy provider in Authentik for external outpost usage.
              """

              import os
              import sys
              import json
              import logging
              import urllib.request
              import urllib.parse
              import urllib.error
              from typing import Dict, List, Optional, Tuple


              class AuthentikAPIError(Exception):
                  """Custom exception for Authentik API errors."""
                  def __init__(self, message: str, status_code: Optional[int] = None,
                               response_body: Optional[str] = None):
                      super().__init__(message)
                      self.status_code = status_code
                      self.response_body = response_body


              class HomeAssistantProxyConfigurator:
                  """Configure Home Assistant proxy provider in Authentik."""

                  def __init__(self, authentik_host: str, authentik_token: str, external_outpost_id: str):
                      self.authentik_host = authentik_host
                      self.external_outpost_id = external_outpost_id
                      self.session_headers = {
                          'Authorization': f'Bearer {authentik_token}',
                          'Content-Type': 'application/json',
                          'User-Agent': 'home-assistant-proxy-configurator/1.0.0'
                      }

                      # Set up logging
                      self.logger = logging.getLogger('home-assistant-proxy-configurator')
                      self.logger.setLevel(logging.INFO)

                      if not self.logger.handlers:
                          handler = logging.StreamHandler(sys.stdout)
                          formatter = logging.Formatter(
                              '%(asctime)s - %(levelname)s - %(message)s'
                          )
                          handler.setFormatter(formatter)
                          self.logger.addHandler(handler)

                      # Home Assistant service configuration
                      self.service_config = {
                          'name': 'homeassistant',
                          'external_host': 'https://homeassistant.k8s.home.geoffdavis.com',
                          'internal_host': 'http://home-assistant.home-automation.svc.cluster.local:8123',
                          'provider_name': 'homeassistant-proxy'
                      }

                  def _make_api_request(self, url: str, method: str = 'GET',
                                      data: Optional[Dict] = None) -> Tuple[int, Dict]:
                      """Make an API request to Authentik."""
                      try:
                          self.logger.debug(f"API call: {method} {url}")

                          # Prepare request
                          req_data = None
                          if data and method in ['POST', 'PATCH', 'PUT']:
                              req_data = json.dumps(data).encode('utf-8')

                          request = urllib.request.Request(
                              url, data=req_data, headers=self.session_headers, method=method
                          )

                          # Make request
                          with urllib.request.urlopen(request) as response:
                              status_code = response.getcode()
                              response_body = response.read().decode('utf-8')

                              try:
                                  response_data = json.loads(response_body) if response_body else {}
                              except json.JSONDecodeError:
                                  response_data = {'raw_response': response_body}

                              return status_code, response_data

                      except urllib.error.HTTPError as e:
                          status_code = e.code
                          try:
                              error_body = e.read().decode('utf-8')
                              error_data = json.loads(error_body) if error_body else {}
                          except (json.JSONDecodeError, UnicodeDecodeError):
                              error_data = {'error': 'Failed to parse error response'}

                          raise AuthentikAPIError(
                              f"API request failed with status {status_code}",
                              status_code=status_code,
                              response_body=str(error_data)
                          )
                      except Exception as e:
                          raise AuthentikAPIError(f"API request failed: {str(e)}")

                  def test_authentication(self) -> bool:
                      """Test API authentication."""
                      try:
                          self.logger.info("Testing API authentication...")
                          url = f"{self.authentik_host}/api/v3/core/users/me/"
                          status_code, response = self._make_api_request(url)

                          if status_code == 200:
                              username = response.get('username', 'unknown')
                              self.logger.info(f"✓ API authentication successful (user: {username})")
                              return True
                          else:
                              self.logger.error(f"✗ API authentication failed with status {status_code}")
                              return False

                      except AuthentikAPIError as e:
                          self.logger.error(f"✗ API authentication failed: {e}")
                          return False

                  def get_authorization_flow(self) -> str:
                      """Get the default authorization flow UUID."""
                      try:
                          self.logger.info("Getting default authorization flow...")
                          url = f"{self.authentik_host}/api/v3/flows/instances/?slug=default-authorization-flow"
                          status_code, response = self._make_api_request(url)

                          if status_code == 200 and response.get("results"):
                              flow_uuid = response["results"][0]["pk"]
                              self.logger.info(f"✓ Using authorization flow: {flow_uuid}")
                              return flow_uuid
                          else:
                              # Fallback UUID
                              fallback_uuid = "be0ee023-11fe-4a43-b453-bc67957cafbf"
                              self.logger.warning(f"⚠ Could not get authorization flow, using fallback: {fallback_uuid}")
                              return fallback_uuid

                      except AuthentikAPIError as e:
                          fallback_uuid = "be0ee023-11fe-4a43-b453-bc67957cafbf"
                          self.logger.warning(f"⚠ Failed to get authorization flow: {e}, using fallback")
                          return fallback_uuid

                  def get_existing_proxy_provider(self) -> Optional[int]:
                      """Get existing Home Assistant proxy provider."""
                      try:
                          self.logger.info("Checking for existing Home Assistant proxy provider...")
                          url = f"{self.authentik_host}/api/v3/providers/proxy/"
                          status_code, response = self._make_api_request(url)

                          if status_code == 200:
                              for provider in response.get("results", []):
                                  if provider["name"] == self.service_config['provider_name']:
                                      provider_pk = provider["pk"]
                                      self.logger.info(f"✓ Found existing provider: {self.service_config['provider_name']} (PK: {provider_pk})")
                                      return provider_pk

                              self.logger.info("✓ No existing Home Assistant proxy provider found")
                              return None
                          else:
                              self.logger.error(f"✗ Failed to fetch proxy providers: status {status_code}")
                              return None

                      except AuthentikAPIError as e:
                          self.logger.error(f"✗ Failed to fetch proxy providers: {e}")
                          return None

                  def create_proxy_provider(self, auth_flow_uuid: str) -> Optional[int]:
                      """Create Home Assistant proxy provider."""
                      try:
                          self.logger.info(f"Creating proxy provider: {self.service_config['provider_name']}")

                          provider_data = {
                              "name": self.service_config['provider_name'],
                              "authorization_flow": auth_flow_uuid,
                              "external_host": self.service_config['external_host'],
                              "internal_host": self.service_config['internal_host'],
                              "internal_host_ssl_validation": False,
                              "mode": "forward_auth",
                              "cookie_domain": "k8s.home.geoffdavis.com",
                              "skip_path_regex": "^/api/.*$",
                              "basic_auth_enabled": False,
                          }

                          url = f"{self.authentik_host}/api/v3/providers/proxy/"
                          status_code, response = self._make_api_request(
                              url, method="POST", data=provider_data
                          )

                          if status_code == 201:
                              provider_pk = response["pk"]
                              self.logger.info(f"✓ Created proxy provider {self.service_config['provider_name']} with PK: {provider_pk}")
                              return provider_pk
                          else:
                              self.logger.error(f"✗ Failed to create proxy provider: status {status_code}")
                              return None

                      except AuthentikAPIError as e:
                          self.logger.error(f"✗ Failed to create proxy provider: {e}")
                          return None

                  def update_proxy_provider(self, provider_pk: int, auth_flow_uuid: str) -> bool:
                      """Update existing Home Assistant proxy provider."""
                      try:
                          self.logger.info(f"Updating proxy provider: {self.service_config['provider_name']} (PK: {provider_pk})")

                          provider_data = {
                              "name": self.service_config['provider_name'],
                              "authorization_flow": auth_flow_uuid,
                              "external_host": self.service_config['external_host'],
                              "internal_host": self.service_config['internal_host'],
                              "internal_host_ssl_validation": False,
                              "mode": "forward_auth",
                              "cookie_domain": "k8s.home.geoffdavis.com",
                              "skip_path_regex": "^/api/.*$",
                              "basic_auth_enabled": False,
                          }

                          url = f"{self.authentik_host}/api/v3/providers/proxy/{provider_pk}/"
                          status_code, response = self._make_api_request(
                              url, method="PATCH", data=provider_data
                          )

                          if status_code == 200:
                              self.logger.info(f"✓ Updated proxy provider {self.service_config['provider_name']}")
                              return True
                          else:
                              self.logger.error(f"✗ Failed to update proxy provider: status {status_code}")
                              return False

                      except AuthentikAPIError as e:
                          self.logger.error(f"✗ Failed to update proxy provider: {e}")
                          return False

                  def get_existing_application(self) -> Optional[int]:
                      """Get existing Home Assistant application."""
                      try:
                          self.logger.info("Checking for existing Home Assistant application...")
                          url = f"{self.authentik_host}/api/v3/core/applications/"
                          status_code, response = self._make_api_request(url)

                          if status_code == 200:
                              for app in response.get("results", []):
                                  if app["name"] == self.service_config['name']:
                                      app_pk = app["pk"]
                                      self.logger.info(f"✓ Found existing application: {self.service_config['name']} (PK: {app_pk})")
                                      return app_pk

                              self.logger.info("✓ No existing Home Assistant application found")
                              return None
                          else:
                              self.logger.error(f"✗ Failed to fetch applications: status {status_code}")
                              return None

                      except AuthentikAPIError as e:
                          self.logger.error(f"✗ Failed to fetch applications: {e}")
                          return None

                  def create_application(self, provider_pk: int) -> bool:
                      """Create Home Assistant application."""
                      try:
                          self.logger.info(f"Creating application: {self.service_config['name']}")

                          app_data = {
                              "name": self.service_config['name'],
                              "slug": self.service_config['name'],
                              "provider": provider_pk,
                              "meta_description": "Home Assistant home automation platform",
                              "meta_launch_url": self.service_config['external_host'],
                              "policy_engine_mode": "any",
                          }

                          url = f"{self.authentik_host}/api/v3/core/applications/"
                          status_code, response = self._make_api_request(
                              url, method="POST", data=app_data
                          )

                          if status_code == 201:
                              self.logger.info(f"✓ Created application: {self.service_config['name']}")
                              return True
                          else:
                              self.logger.error(f"✗ Failed to create application: status {status_code}")
                              return False

                      except AuthentikAPIError as e:
                          self.logger.error(f"✗ Failed to create application: {e}")
                          return False

                  def update_outpost_providers(self, provider_pk: int) -> bool:
                      """Add Home Assistant provider to external outpost."""
                      try:
                          self.logger.info(f"Adding Home Assistant provider to external outpost: {self.external_outpost_id}")

                          # Get current outpost configuration
                          url = f"{self.authentik_host}/api/v3/outposts/instances/{self.external_outpost_id}/"
                          status_code, current_outpost = self._make_api_request(url)

                          if status_code != 200:
                              self.logger.error(f"✗ Failed to get current outpost: status {status_code}")
                              return False

                          # Get current providers and add Home Assistant provider
                          current_providers = current_outpost.get("providers", [])
                          if provider_pk not in current_providers:
                              updated_providers = current_providers + [provider_pk]

                              # Update the outpost
                              update_data = {
                                  "name": current_outpost["name"],
                                  "type": current_outpost["type"],
                                  "providers": updated_providers,
                                  "config": current_outpost.get("config", {}),
                              }

                              status_code, response = self._make_api_request(
                                  url, method="PATCH", data=update_data
                              )

                              if status_code == 200:
                                  self.logger.info(f"✓ Added Home Assistant provider to external outpost (total providers: {len(updated_providers)})")
                                  return True
                              else:
                                  self.logger.error(f"✗ Failed to update outpost: status {status_code}")
                                  return False
                          else:
                              self.logger.info("✓ Home Assistant provider already assigned to external outpost")
                              return True

                      except AuthentikAPIError as e:
                          self.logger.error(f"✗ Failed to update outpost: {e}")
                          return False

                  def configure_home_assistant(self) -> bool:
                      """Configure Home Assistant proxy provider and application."""
                      self.logger.info("=== Starting Home Assistant Authentik Configuration ===")

                      # Test authentication
                      if not self.test_authentication():
                          return False

                      # Get authorization flow
                      auth_flow_uuid = self.get_authorization_flow()

                      # Check for existing proxy provider
                      provider_pk = self.get_existing_proxy_provider()

                      if provider_pk:
                          # Update existing provider
                          if not self.update_proxy_provider(provider_pk, auth_flow_uuid):
                              self.logger.error("✗ Failed to update existing proxy provider")
                              return False
                      else:
                          # Create new provider
                          provider_pk = self.create_proxy_provider(auth_flow_uuid)
                          if not provider_pk:
                              self.logger.error("✗ Failed to create proxy provider")
                              return False

                      # Check for existing application
                      app_pk = self.get_existing_application()
                      if not app_pk:
                          # Create new application
                          if not self.create_application(provider_pk):
                              self.logger.warning("⚠ Failed to create application, but continuing...")

                      # Add provider to external outpost
                      if not self.update_outpost_providers(provider_pk):
                          self.logger.error("✗ Failed to add provider to external outpost")
                          return False

                      self.logger.info("=== Home Assistant Configuration Complete ===")
                      self.logger.info("✓ Home Assistant proxy provider configured")
                      self.logger.info("✓ Home Assistant application created/updated")
                      self.logger.info("✓ Provider assigned to external outpost")
                      self.logger.info("✓ Home Assistant should now be accessible via https://homeassistant.k8s.home.geoffdavis.com")

                      return True


              def main():
                  """Main entry point for the script."""
                  # Get configuration from environment variables
                  authentik_host = os.environ.get('AUTHENTIK_HOST')
                  authentik_token = os.environ.get('AUTHENTIK_TOKEN')
                  external_outpost_id = os.environ.get('EXTERNAL_OUTPOST_ID')

                  if not all([authentik_host, authentik_token, external_outpost_id]):
                      print("✗ Missing required environment variables:")
                      print("  - AUTHENTIK_HOST")
                      print("  - AUTHENTIK_TOKEN")
                      print("  - EXTERNAL_OUTPOST_ID")
                      sys.exit(1)

                  # Create configurator and run
                  configurator = HomeAssistantProxyConfigurator(authentik_host, authentik_token, external_outpost_id)

                  try:
                      success = configurator.configure_home_assistant()
                      sys.exit(0 if success else 1)
                  except Exception as e:
                      configurator.logger.error(f"✗ Unexpected error: {e}")
                      sys.exit(1)


              if __name__ == "__main__":
                  main()
              EOF

              echo "=== Running Home Assistant Proxy Configuration Script ==="
              python3 /tmp/configure_home_assistant_proxy.py
