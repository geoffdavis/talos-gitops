---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: home-automation
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
    app.kubernetes.io/part-of: home-automation-stack
    app.kubernetes.io/version: "7.2"
spec:
  replicas: 1
  strategy:
    type: Recreate # Single replica with persistent storage
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: cache
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        app.kubernetes.io/component: cache
        app.kubernetes.io/part-of: home-automation-stack
        app.kubernetes.io/version: "7.2"
      annotations:
        # Force pod restart when config changes
        checksum/config: '{{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}'
    spec:
      # Security context following cluster patterns
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault

      # Node scheduling preferences
      nodeSelector:
        kubernetes.io/os: linux

      tolerations:
        - key: "node-role.kubernetes.io/control-plane"
          operator: "Exists"
          effect: "NoSchedule"
        - key: "node-role.kubernetes.io/master"
          operator: "Exists"
          effect: "NoSchedule"

      containers:
        - name: redis
          image: redis:8.0-alpine
          imagePullPolicy: IfNotPresent

          # Container security context
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false # Redis needs to write to data directory
            runAsNonRoot: true
            runAsUser: 999
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault

          # Resource limits appropriate for Redis cache workload
          resources:
            requests:
              cpu: 50m
              memory: 64Mi
            limits:
              cpu: 200m
              memory: 256Mi

          # Redis port
          ports:
            - name: redis
              containerPort: 6379
              protocol: TCP

          # Redis configuration via ConfigMap
          command:
            - redis-server
            - /etc/redis/redis.conf

          # Volume mounts
          volumeMounts:
            - name: redis-data
              mountPath: /data
            - name: redis-config
              mountPath: /etc/redis
              readOnly: true
            - name: tmp
              mountPath: /tmp

          # Health checks
          livenessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3

          readinessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3

          startupProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 10

      volumes:
        - name: redis-data
          persistentVolumeClaim:
            claimName: redis-data
        - name: redis-config
          configMap:
            name: redis-config
            defaultMode: 0644
        - name: tmp
          emptyDir:
            sizeLimit: 100Mi
