apiVersion: batch/v1
kind: Job
metadata:
  name: debug-authentik-api-structure
  namespace: authentik-proxy
  labels:
    app.kubernetes.io/name: authentik-debug
    app.kubernetes.io/component: api-investigation
spec:
  backoffLimit: 2
  activeDeadlineSeconds: 300
  template:
    metadata:
      labels:
        app.kubernetes.io/name: authentik-debug
        app.kubernetes.io/component: api-investigation
    spec:
      restartPolicy: OnFailure
      serviceAccountName: authentik-proxy
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      initContainers:
        - name: wait-for-authentik
          image: curlimages/curl:8.5.0
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/sh
            - -c
            - |
              echo "Waiting for Authentik server to be ready..."
              max_attempts=15
              attempt=0
              while [ $attempt -lt $max_attempts ]; do
                if curl -f -s http://authentik-server.authentik.svc.cluster.local:80/if/flow/initial-setup/ > /dev/null 2>&1; then
                  echo "Authentik server is ready!"
                  exit 0
                fi
                attempt=$((attempt + 1))
                echo "Authentik not ready yet, attempt $attempt/$max_attempts, waiting 5 seconds..."
                sleep 5
              done
              echo "ERROR: Authentik server did not become ready within $((max_attempts * 5)) seconds"
              exit 1
      containers:
        - name: debug-api-structure
          image: python:3.12-slim
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: AUTHENTIK_HOST
              valueFrom:
                secretKeyRef:
                  name: authentik-proxy-token
                  key: authentik_host
            - name: AUTHENTIK_TOKEN
              valueFrom:
                secretKeyRef:
                  name: authentik-proxy-token
                  key: token
          command:
            - /bin/sh
            - -c
            - |
              set -e
              echo "=== Installing Python Dependencies ==="
              pip install --no-cache-dir --target /tmp/python-packages urllib3
              export PYTHONPATH="/tmp/python-packages:$PYTHONPATH"

              echo "=== Creating API Structure Debug Script ==="
              cat > /tmp/debug_api.py << 'EOF'
              #!/usr/bin/env python3
              """
              Debug script to investigate actual Authentik API structure
              """

              import os
              import json
              import urllib.request
              import urllib.parse
              import urllib.error


              def make_api_request(url, headers):
                  """Make an API request to Authentik."""
                  try:
                      request = urllib.request.Request(url, headers=headers)
                      with urllib.request.urlopen(request) as response:
                          status_code = response.getcode()
                          response_body = response.read().decode('utf-8')
                          try:
                              response_data = json.loads(response_body) if response_body else {}
                          except json.JSONDecodeError:
                              response_data = {'raw_response': response_body}
                          return status_code, response_data
                  except urllib.error.HTTPError as e:
                      status_code = e.code
                      try:
                          error_body = e.read().decode('utf-8')
                          error_data = json.loads(error_body) if error_body else {}
                      except (json.JSONDecodeError, UnicodeDecodeError):
                          error_data = {'error': 'Failed to parse error response'}
                      return status_code, error_data


              def main():
                  # Configuration from environment
                  authentik_host = os.environ.get('AUTHENTIK_HOST')
                  authentik_token = os.environ.get('AUTHENTIK_TOKEN')

                  if not all([authentik_host, authentik_token]):
                      print("ERROR: Missing required environment variables")
                      return 1

                  headers = {
                      'Authorization': f'Bearer {authentik_token}',
                      'Content-Type': 'application/json'
                  }

                  print("=== Investigating Authentik API Structure ===")
                  print(f"Authentik Host: {authentik_host}")

                  # 1. Test authentication
                  print("\n=== Authentication Test ===")
                  status_code, response = make_api_request(f"{authentik_host}/api/v3/core/users/me/", headers)
                  if status_code == 200:
                      print(f"✓ Authentication successful (user: {response.get('username', 'unknown')})")
                  else:
                      print(f"✗ Authentication failed: {status_code}")
                      return 1

                  # 2. Check all applications
                  print("\n=== Applications ===")
                  status_code, response = make_api_request(f"{authentik_host}/api/v3/core/applications/", headers)
                  if status_code == 200:
                      apps = response.get('results', [])
                      print(f"Found {len(apps)} applications:")
                      for app in apps:
                          print(f"  - Name: '{app.get('name')}'")
                          print(f"    Slug: '{app.get('slug')}'")
                          print(f"    Provider: {app.get('provider')}")
                          print(f"    Launch URL: '{app.get('meta_launch_url')}'")
                          print()
                  else:
                      print(f"✗ Failed to fetch applications: {status_code}")

                  # 3. Check all proxy providers
                  print("\n=== Proxy Providers ===")
                  status_code, response = make_api_request(f"{authentik_host}/api/v3/providers/proxy/", headers)
                  if status_code == 200:
                      providers = response.get('results', [])
                      print(f"Found {len(providers)} proxy providers:")
                      for provider in providers:
                          print(f"  - Name: '{provider.get('name')}'")
                          print(f"    PK: {provider.get('pk')}")
                          print(f"    Mode: '{provider.get('mode')}'")
                          print(f"    External Host: '{provider.get('external_host')}'")
                          print(f"    Internal Host: '{provider.get('internal_host')}'")
                          print(f"    Component: '{provider.get('component')}'")
                          print()
                  else:
                      print(f"✗ Failed to fetch proxy providers: {status_code}")

                  # 4. Check all OAuth2 providers
                  print("\n=== OAuth2 Providers ===")
                  status_code, response = make_api_request(f"{authentik_host}/api/v3/providers/oauth2/", headers)
                  if status_code == 200:
                      providers = response.get('results', [])
                      print(f"Found {len(providers)} OAuth2 providers:")
                      for provider in providers:
                          print(f"  - Name: '{provider.get('name')}'")
                          print(f"    PK: {provider.get('pk')}")
                          print(f"    Client Type: '{provider.get('client_type')}'")
                          print(f"    Redirect URIs: '{provider.get('redirect_uris')}'")
                          print(f"    Component: '{provider.get('component')}'")
                          print()
                  else:
                      print(f"✗ Failed to fetch OAuth2 providers: {status_code}")

                  # 5. Check all outposts
                  print("\n=== Outposts ===")
                  status_code, response = make_api_request(f"{authentik_host}/api/v3/outposts/instances/", headers)
                  if status_code == 200:
                      outposts = response.get('results', [])
                      print(f"Found {len(outposts)} outposts:")
                      for outpost in outposts:
                          print(f"  - Name: '{outpost.get('name')}'")
                          print(f"    PK: '{outpost.get('pk')}'")
                          print(f"    Type: '{outpost.get('type')}'")
                          print(f"    Providers: {outpost.get('providers')}")
                          config = outpost.get('config', {})
                          print(f"    Internal URL: '{config.get('authentik_host')}'")
                          print(f"    Browser URL: '{config.get('authentik_host_browser')}'")
                          print()
                  else:
                      print(f"✗ Failed to fetch outposts: {status_code}")

                  # 6. Check all provider types (to understand the structure)
                  print("\n=== All Provider Types Investigation ===")
                  provider_endpoints = [
                      'providers/proxy/',
                      'providers/oauth2/',
                      'providers/saml/',
                      'providers/ldap/',
                      'providers/radius/',
                      'providers/scim/'
                  ]

                  for endpoint in provider_endpoints:
                      print(f"\n--- {endpoint} ---")
                      status_code, response = make_api_request(f"{authentik_host}/api/v3/{endpoint}", headers)
                      if status_code == 200:
                          providers = response.get('results', [])
                          print(f"Found {len(providers)} providers in {endpoint}")
                          for provider in providers[:3]:  # Show first 3 only
                              print(f"  - {provider.get('name')} (PK: {provider.get('pk')})")
                      else:
                          print(f"✗ Failed to fetch {endpoint}: {status_code}")

                  print("\n=== Investigation Complete ===")
                  return 0


              if __name__ == "__main__":
                  exit(main())
              EOF

              echo "=== Running API Structure Debug Script ==="
              python3 /tmp/debug_api.py

              echo "=== Debug Complete ==="
      volumes: []
