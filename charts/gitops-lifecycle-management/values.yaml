# Default values for gitops-lifecycle-management
# This chart replaces problematic job patterns with proper Helm lifecycle management

global:
  # Global configuration
  domain: "k8s.home.geoffdavis.com"
  authentikHost: "http://authentik-server.authentik.svc.cluster.local:80"

# Authentication management configuration
authentication:
  enabled: true

  # Authentik configuration
  authentik:
    # External outpost configuration - retrieved from 1Password
    externalOutpost:
      # 1Password key for outpost configuration
      onePasswordKey: "home-ops-authentik-external-outpost-config"
      # Secret name to create
      secretName: "authentik-outpost-config"

    # Default flows - retrieved from 1Password
    flows:
      # 1Password key for flow configuration
      onePasswordKey: "home-ops-authentik-flow-config"
      # Secret name to create
      secretName: "authentik-flow-config"

    # Cookie domain for authentication
    cookieDomain: "k8s.home.geoffdavis.com"

    # API token - retrieved from 1Password via ExternalSecret
    token:
      # 1Password key for admin token
      onePasswordKey: "home-ops-authentik-admin-token"
      # Secret name to create
      secretName: "authentik-admin-token"
      # Secret key within the secret
      secretKey: "token"

  # Pre-install hooks configuration
  hooks:
    enabled: true

    # Hook execution timeout - increased for complex operations
    activeDeadlineSeconds: 900

    # Enhanced retry configuration
    backoffLimit: 5

    # TTL for cleanup
    ttlSecondsAfterFinished: 300

    # Retry policy configuration
    retryPolicy:
      # Enable exponential backoff
      exponentialBackoff: true
      # Base delay between retries (seconds)
      baseDelay: 2
      # Maximum delay between retries (seconds)
      maxDelay: 60
      # Backoff multiplier
      backoffMultiplier: 2
      # Add jitter to prevent thundering herd
      jitter: true
      # Maximum total retry time (seconds)
      maxRetryTime: 300

    # Image configuration
    image:
      repository: "curlimages/curl"
      tag: "8.15.0"
      pullPolicy: IfNotPresent

    # Security context
    securityContext:
      runAsNonRoot: true
      runAsUser: 65534
      runAsGroup: 65534
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      capabilities:
        drop: ["ALL"]
      seccompProfile:
        type: RuntimeDefault

# Service discovery controller configuration
serviceDiscovery:
  enabled: true

  # Controller deployment configuration
  controller:
    replicas: 1

    image:
      repository: "bitnami/kubectl"
      tag: "1.31.1"
      pullPolicy: IfNotPresent

    # Resource limits
    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 50m
        memory: 64Mi

    # Security context
    securityContext:
      runAsNonRoot: true
      runAsUser: 65534
      runAsGroup: 65534
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      capabilities:
        drop: ["ALL"]
      seccompProfile:
        type: RuntimeDefault

    # Node selector and tolerations
    nodeSelector: {}
    tolerations: []
    affinity: {}

  # Service discovery configuration
  discovery:
    # Label selector for services to discover
    serviceSelector:
      matchLabels:
        authentik.io/proxy: "enabled"

    # Reconciliation interval
    reconcileInterval: "5m"

    # Cleanup orphaned providers
    cleanupOrphaned: true

# Database initialization configuration
database:
  enabled: true

  # Pre-install hooks for database setup
  hooks:
    enabled: true

    # Hook execution timeout
    activeDeadlineSeconds: 600

    # Enhanced retry configuration
    backoffLimit: 5

    # TTL for cleanup
    ttlSecondsAfterFinished: 300

    # PostgreSQL configuration
    postgresql:
      # Connection configuration
      host: "homeassistant-postgresql-rw.home-automation.svc.cluster.local"
      port: 5432
      database: "homeassistant"

      # Credentials secret reference
      credentialsSecret:
        name: "homeassistant-postgresql-superuser"
        usernameKey: "username"
        passwordKey: "password"

    # Initialization scripts
    initScripts:
      # Home Assistant database initialization
      homeassistant:
        enabled: true
        sql: "CREATE DATABASE IF NOT EXISTS homeassistant; DO $$ BEGIN IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'homeassistant') THEN CREATE ROLE homeassistant LOGIN PASSWORD 'homeassistant'; END IF; END $$; GRANT ALL PRIVILEGES ON DATABASE homeassistant TO homeassistant;"

# RBAC configuration
rbac:
  # Create RBAC resources
  create: true

  # Service account configuration
  serviceAccount:
    # Create service account
    create: true

    # Service account name (if not created, must exist)
    name: ""

    # Annotations for service account
    annotations: {}

  # Cluster role permissions
  clusterRole:
    # Rules for service discovery controller
    rules:
      - apiGroups: [""]
        resources: ["services", "endpoints", "configmaps", "secrets"]
        verbs: ["get", "list", "watch", "create", "update", "patch"]
      - apiGroups: ["apps"]
        resources: ["deployments", "replicasets"]
        verbs: ["get", "list", "watch"]
      - apiGroups: ["networking.k8s.io"]
        resources: ["ingresses"]
        verbs: ["get", "list", "watch"]
      - apiGroups: ["batch"]
        resources: ["jobs"]
        verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
      - apiGroups: ["gitops.io"]
        resources: ["proxyconfigs"]
        verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

# Custom Resource Definitions
crds:
  # Install CRDs - enabled for ProxyConfig functionality
  install: true

  # ProxyConfig CRD configuration
  proxyConfig:
    enabled: true

# Validation and cleanup configuration
validation:
  enabled: true

  # Post-install validation hooks
  hooks:
    enabled: true

    # Validation timeout
    activeDeadlineSeconds: 180

    # Enhanced retry configuration
    backoffLimit: 3

    # TTL for cleanup
    ttlSecondsAfterFinished: 300

    # Validation tests
    tests:
      # Test Authentik API connectivity
      authentikConnectivity: true

      # Test service discovery functionality
      serviceDiscovery: true

      # Test database connectivity
      databaseConnectivity: true

# Cleanup configuration
cleanup:
  enabled: true

  # Cleanup controller configuration
  controller:
    # Cleanup interval
    interval: "1h"

    # Controller deployment configuration
    replicas: 1

    image:
      repository: "bitnami/kubectl"
      tag: "1.31.1"
      pullPolicy: IfNotPresent

    # Resource limits
    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 50m
        memory: 64Mi

    # Security context
    securityContext:
      runAsNonRoot: true
      runAsUser: 65534
      runAsGroup: 65534
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true
      capabilities:
        drop: ["ALL"]
      seccompProfile:
        type: RuntimeDefault

    # Node selector and tolerations
    nodeSelector: {}
    tolerations: []
    affinity: {}

    # Cleanup policies
    policies:
      # Clean up completed jobs after TTL
      completedJobs:
        enabled: true
        ttl: "1h"
        # Additional filters
        namespaces: [] # Empty means all namespaces
        labelSelector: ""
        excludeLabels: ["helm.sh/hook"]

      # Clean up failed jobs after TTL
      failedJobs:
        enabled: true
        ttl: "24h"
        # Additional filters
        namespaces: [] # Empty means all namespaces
        labelSelector: ""
        excludeLabels: ["helm.sh/hook"]
        # Retry failed jobs before cleanup
        retryBeforeCleanup: false
        maxRetries: 3

      # Clean up orphaned proxy providers
      orphanedProviders:
        enabled: true
        maxAge: "7d"
        # Dry run mode for testing
        dryRun: false

      # Clean up stuck resources
      stuckResources:
        enabled: true
        # Pods stuck in terminating state
        terminatingPods:
          enabled: true
          maxAge: "5m"
        # Jobs without TTL
        jobsWithoutTTL:
          enabled: true
          maxAge: "1h"
        # Failed pods
        failedPods:
          enabled: true
          maxAge: "1h"
          phases: ["Failed", "Succeeded"]

      # Clean up old events
      events:
        enabled: true
        maxAge: "1h"
        types: ["Warning", "Normal"]

      # Clean up old replica sets
      replicaSets:
        enabled: true
        maxAge: "7d"
        # Keep minimum number of old replica sets
        keepMinimum: 2

# Monitoring and observability
monitoring:
  enabled: true

  # ServiceMonitor for Prometheus
  serviceMonitor:
    enabled: true
    interval: "30s"
    scrapeTimeout: "10s"
    # Additional service monitors for controllers
    controllers:
      cleanup:
        enabled: true
        port: 8080
        path: "/metrics"
      serviceDiscovery:
        enabled: true
        port: 8080
        path: "/metrics"
      retry:
        enabled: true
        port: 8082
        path: "/retry-metrics"

  # Metrics configuration
  metrics:
    port: 8080
    path: "/metrics"

  # Prometheus alerting rules
  prometheusRules:
    enabled: false
    # Evaluation interval for rules
    evaluationInterval: "30s"
    # Runbook URL base for alert annotations
    runbookUrl: "https://github.com/geoff-davis/talos-gitops/blob/main/docs/runbooks"

    # Alert timing configuration
    alertFor:
      controllerDown: "5m"
      highFailureRate: "10m"
      longCycle: "15m"
      excessiveCleanup: "30m"
      stuckResources: "1h"
      retryFailure: "10m"
      excessiveRetries: "15m"
      longRetry: "10m"
      stuckProxyConfig: "10m"
      hookFailures: "5m"
      longHook: "5m"
      highMemoryUsage: "10m"
      highCPUUsage: "10m"
      highRestartRate: "15m"

    # Alert threshold configuration
    thresholds:
      cleanupFailureRate: 0.1
      maxCleanupDuration: 300
      maxJobCleanupRate: 10
      maxStuckResourcesPerHour: 5
      retryFailureRate: 0.2
      maxRetryRate: 5
      maxRetryDuration: 600
      maxProxyConfigPendingTime: 600
      maxHookFailuresPerHour: 3
      maxHookDuration: 900
      memoryUsageThreshold: 0.8
      cpuUsageThreshold: 0.8
      maxRestartRate: 0.1

    # Additional labels for alerts
    additionalLabels:
      team: "platform"
      service: "gitops-lifecycle-management"

    # Additional annotations for alerts
    additionalAnnotations:
      dashboard: "https://grafana.k8s.home.geoffdavis.com/d/gitops-lifecycle-management"

# Logging configuration
logging:
  level: "info"
  format: "json"

# Common labels applied to all resources
# Note: Standard labels (app.kubernetes.io/name, app.kubernetes.io/instance) are provided by chart templates
# Only add additional labels here that don't conflict with template-generated labels
commonLabels:
  app.kubernetes.io/part-of: talos-gitops

# Common annotations applied to all resources
commonAnnotations: {}

# External Secrets configuration
externalSecrets:
  enabled: true

  # ClusterSecretStore reference
  secretStore:
    name: "onepassword-connect"
    kind: "ClusterSecretStore"

  # Refresh interval for secrets
  refreshInterval: "15m"

  # 1Password vault configuration
  onePassword:
    vault: "Automation"

    # Secret configurations
    secrets:
      # Authentik admin token
      authentikToken:
        enabled: true
        key: "home-ops-authentik-admin-token"
        property: "credential"
        targetSecret: "authentik-admin-token"
        targetKey: "token"

      # Authentik outpost configuration
      authentikOutpost:
        enabled: true
        key: "home-ops-authentik-external-outpost-config"
        properties:
          outpostId: "outpost_id"
          authorizationFlow: "authorization_flow"
          invalidationFlow: "invalidation_flow"
        targetSecret: "authentik-outpost-config"

      # Database credentials
      databaseCredentials:
        enabled: true
        key: "home-ops-postgresql-superuser-credentials"
        properties:
          username: "username"
          password: "password"
        targetSecret: "postgresql-admin-credentials"

      # OIDC client secrets
      oidcSecrets:
        enabled: true
        grafana:
          key: "home-ops-grafana-oidc-client-secret"
          property: "credential"
          targetSecret: "grafana-oidc-secret"
          targetKey: "client-secret"
        dashboard:
          key: "home-ops-dashboard-oidc-client-secret"
          property: "credential"
          targetSecret: "dashboard-oidc-secret"
          targetKey: "client-secret"

# Pod disruption budget
podDisruptionBudget:
  enabled: false
  minAvailable: 1

# Network policies
networkPolicy:
  enabled: false

  # Ingress rules
  ingress: []

  # Egress rules
  egress: []

# Enhanced retry configuration for init containers and hooks
retry:
  enabled: true

  # Global retry defaults
  defaults:
    maxAttempts: 10
    baseDelay: 2
    maxDelay: 60
    backoffMultiplier: 2
    jitter: true
    timeout: 300

  # Service-specific retry configurations
  services:
    database:
      maxAttempts: 30
      baseDelay: 2
      maxDelay: 30
      timeout: 600
      healthCheck:
        enabled: true
        command: "psql -c 'SELECT 1;'"
        interval: 10

    redis:
      maxAttempts: 20
      baseDelay: 1
      maxDelay: 15
      timeout: 300
      healthCheck:
        enabled: true
        command: "redis-cli ping"
        interval: 5

    mqtt:
      maxAttempts: 20
      baseDelay: 2
      maxDelay: 20
      timeout: 300
      healthCheck:
        enabled: true
        command: "nc -z -w5 $MQTT_HOST $MQTT_PORT"
        interval: 5

    http:
      maxAttempts: 15
      baseDelay: 1
      maxDelay: 30
      timeout: 300
      healthCheck:
        enabled: true
        expectedStatus: 200
        interval: 10

    kubernetes:
      maxAttempts: 30
      baseDelay: 2
      maxDelay: 30
      timeout: 600
      healthCheck:
        enabled: true
        interval: 10

  # Circuit breaker configuration
  circuitBreaker:
    enabled: true
    failureThreshold: 5
    recoveryTimeout: 60
    checkInterval: 10

  # Metrics collection
  metrics:
    enabled: true
    port: 8082
    path: "/retry-metrics"

# Init container enhancements
initContainers:
  enabled: true

  # Enhanced retry logic
  retryLogic:
    enabled: true
    # Use shared retry functions
    useSharedFunctions: true
    # Metrics collection
    collectMetrics: true

  # Resource limits for init containers
  resources:
    requests:
      cpu: 50m
      memory: 64Mi
    limits:
      cpu: 100m
      memory: 128Mi

  # Security context for init containers
  securityContext:
    runAsNonRoot: true
    runAsUser: 65534
    runAsGroup: 65534
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop: ["ALL"]
    seccompProfile:
      type: RuntimeDefault

# Helm hook enhancements
helmHooks:
  enabled: true

  # Enhanced retry policies
  retryPolicy:
    enabled: true
    # Hook-specific retry limits
    preInstall:
      backoffLimit: 5
      activeDeadlineSeconds: 600
    preUpgrade:
      backoffLimit: 3
      activeDeadlineSeconds: 300
    postInstall:
      backoffLimit: 2
      activeDeadlineSeconds: 180
    postUpgrade:
      backoffLimit: 2
      activeDeadlineSeconds: 180

  # Failure handling
  failureHandling:
    enabled: true
    # Rollback on failure
    rollbackOnFailure: true
    # Cleanup failed hooks
    cleanupOnFailure: true
    # Notification on failure
    notifyOnFailure: false

  # Hook timeout configurations
  timeouts:
    # Global hook timeout
    global: 900
    # Per-hook timeouts
    authSetup: 300
    databaseInit: 600
    validation: 180
