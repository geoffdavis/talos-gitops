apiVersion: batch/v1
kind: Job
metadata:
  name: fix-browser-redirect
  namespace: authentik-proxy
spec:
  template:
    spec:
      serviceAccountName: authentik-proxy
      restartPolicy: Never
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: fix-redirect
          image: python:3.12-slim
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: AUTHENTIK_HOST
              valueFrom:
                secretKeyRef:
                  name: authentik-proxy-token
                  key: authentik_host
            - name: AUTHENTIK_TOKEN
              valueFrom:
                secretKeyRef:
                  name: authentik-proxy-token
                  key: token
          command:
            - /bin/sh
            - -c
            - |
              echo "=== Fixing External Outpost Browser Redirect ==="
              python3 -c "
              import os
              import json
              import urllib.request

              authentik_host = os.environ.get('AUTHENTIK_HOST')
              authentik_token = os.environ.get('AUTHENTIK_TOKEN')

              headers = {
                  'Authorization': f'Bearer {authentik_token}',
                  'Content-Type': 'application/json'
              }

              # External outpost ID
              EXTERNAL_OUTPOST_ID = '3f0970c5-d6a3-43b2-9a36-d74665c6b24e'

              try:
                  print('Getting current external outpost configuration...')
                  url = f'{authentik_host}/api/v3/outposts/instances/{EXTERNAL_OUTPOST_ID}/'
                  request = urllib.request.Request(url, headers=headers)
                  
                  with urllib.request.urlopen(request) as response:
                      outpost_data = json.loads(response.read().decode('utf-8'))
                  
                  current_config = outpost_data.get('config', {})
                  print(f'Current authentik_host: {current_config.get(\"authentik_host\", \"not set\")}')
                  print(f'Current authentik_host_browser: {current_config.get(\"authentik_host_browser\", \"not set\")}')
                  
                  # Update configuration with correct external URLs
                  updated_config = {
                      **current_config,
                      'authentik_host': 'https://authentik.k8s.home.geoffdavis.com',
                      'authentik_host_browser': 'https://authentik.k8s.home.geoffdavis.com',
                      'authentik_host_insecure': False,
                      'log_level': 'info',
                      'error_reporting': False,
                      'object_naming_template': 'ak-outpost-%(name)s'
                  }
                  
                  update_data = {
                      'name': outpost_data['name'],
                      'type': outpost_data['type'],
                      'providers': outpost_data['providers'],
                      'config': updated_config
                  }
                  
                  print('Updating outpost configuration with external URLs...')
                  req_data = json.dumps(update_data).encode('utf-8')
                  request = urllib.request.Request(url, data=req_data, headers=headers, method='PATCH')
                  
                  with urllib.request.urlopen(request) as response:
                      result = json.loads(response.read().decode('utf-8'))
                      updated_config = result.get('config', {})
                      print('✓ Updated outpost configuration')
                      print(f'✓ authentik_host: {updated_config.get(\"authentik_host\", \"not set\")}')
                      print(f'✓ authentik_host_browser: {updated_config.get(\"authentik_host_browser\", \"not set\")}')
                  
                  print('=== Browser redirect fix complete ===')
                  print('✓ External outpost now uses external URLs for browser redirects')
                  print('✓ Services should now redirect to https://authentik.k8s.home.geoffdavis.com')

              except Exception as e:
                  print(f'Error: {e}')
                  import traceback
                  traceback.print_exc()
              "
  backoffLimit: 1