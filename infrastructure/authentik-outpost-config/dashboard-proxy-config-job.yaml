---
apiVersion: batch/v1
kind: Job
metadata:
  name: authentik-dashboard-proxy-config
  namespace: authentik
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-weight: "16"
spec:
  backoffLimit: 5
  activeDeadlineSeconds: 900
  template:
    metadata:
      labels:
        app.kubernetes.io/name: authentik-dashboard-config
        app.kubernetes.io/component: configuration
    spec:
      restartPolicy: OnFailure
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      initContainers:
        - name: wait-for-authentik
          image: curlimages/curl:8.15.0
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/sh
            - -c
            - |
              echo "Waiting for Authentik server to be ready..."
              max_attempts=30
              attempt=0
              while [ $attempt -lt $max_attempts ]; do
                if curl -f -s http://authentik-server.authentik.svc.cluster.local/if/flow/initial-setup/ > /dev/null 2>&1; then
                  echo "Authentik server is ready!"
                  exit 0
                fi
                attempt=$((attempt + 1))
                echo "Authentik not ready yet, attempt $attempt/$max_attempts, waiting 10 seconds..."
                sleep 10
              done
              echo "ERROR: Authentik server did not become ready within $((max_attempts * 10)) seconds"
              exit 1
        - name: wait-for-admin-token
          image: curlimages/curl:8.15.0
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: AUTHENTIK_HOST
              value: "http://authentik-server.authentik.svc.cluster.local"
            - name: AUTHENTIK_TOKEN
              valueFrom:
                secretKeyRef:
                  name: authentik-admin-token
                  key: token
          command:
            - /bin/sh
            - -c
            - |
              echo "Waiting for admin token to be valid..."
              max_attempts=20
              attempt=0
              while [ $attempt -lt $max_attempts ]; do
                response=$(curl -s -w "%{http_code}" -o /dev/null \
                  -H "Authorization: Bearer ${AUTHENTIK_TOKEN}" \
                  "${AUTHENTIK_HOST}/api/v3/core/users/me/")
                if [ "$response" = "200" ]; then
                  echo "Admin token is valid!"
                  exit 0
                fi
                attempt=$((attempt + 1))
                echo "Admin token not ready yet, attempt $attempt/$max_attempts (HTTP $response), waiting 15 seconds..."
                sleep 15
              done
              echo "ERROR: Admin token did not become valid within $((max_attempts * 15)) seconds"
              exit 1
      containers:
        - name: configure-dashboard-proxy
          image: curlimages/curl:8.15.0
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: AUTHENTIK_HOST
              value: "http://authentik-server.authentik.svc.cluster.local"
            - name: AUTHENTIK_TOKEN
              valueFrom:
                secretKeyRef:
                  name: authentik-admin-token
                  key: token
          command:
            - /bin/sh
            - -c
            - |
              set -e
              echo "Configuring Kubernetes Dashboard proxy provider and application..."

              # Enhanced retry function with exponential backoff
              retry_api_call() {
                local url="$1"
                local method="${2:-GET}"
                local data="${3:-}"
                local max_retries=5
                local retry_count=0
                local base_delay=2

                while [ $retry_count -lt $max_retries ]; do
                  echo "API call attempt $((retry_count + 1))/$max_retries: $method $url"

                  if [ "$method" = "POST" ] && [ -n "$data" ]; then
                    response=$(curl -s -w "%{http_code}" -o /tmp/api_response \
                      -X POST \
                      -H "Authorization: Bearer ${ADMIN_TOKEN}" \
                      -H "Content-Type: application/json" \
                      -d "$data" \
                      "$url")
                  elif [ "$method" = "PATCH" ] && [ -n "$data" ]; then
                    response=$(curl -s -w "%{http_code}" -o /tmp/api_response \
                      -X PATCH \
                      -H "Authorization: Bearer ${ADMIN_TOKEN}" \
                      -H "Content-Type: application/json" \
                      -d "$data" \
                      "$url")
                  else
                    response=$(curl -s -w "%{http_code}" -o /tmp/api_response \
                      -H "Authorization: Bearer ${ADMIN_TOKEN}" \
                      "$url")
                  fi

                  echo "Response code: $response"

                  if [ "$response" = "200" ] || [ "$response" = "201" ]; then
                    echo "API call successful"
                    return 0
                  fi

                  retry_count=$((retry_count + 1))
                  if [ $retry_count -lt $max_retries ]; then
                    delay=$((base_delay * retry_count))
                    echo "API call failed with status $response, retrying in ${delay}s..."
                    echo "Response body:"
                    cat /tmp/api_response
                    sleep $delay
                  fi
                done

                echo "ERROR: API call failed after $max_retries retries"
                echo "Final response body:"
                cat /tmp/api_response
                return 1
              }

              # Get admin token
              ADMIN_TOKEN="${AUTHENTIK_TOKEN}"

              # Test authentication with enhanced retry
              echo "Testing authentication..."
              if ! retry_api_call "${AUTHENTIK_HOST}/api/v3/core/users/me/"; then
                echo "ERROR: API token authentication failed after retries."
                echo "Please check the admin-token-setup job logs."
                exit 1
              fi
              echo "Authentication successful"

              # Use the same authorization flow as other providers
              AUTH_FLOW_UUID="be0ee023-11fe-4a43-b453-bc67957cafbf"
              echo "Using authorization flow: $AUTH_FLOW_UUID"

              # Check if Dashboard proxy provider already exists
              echo "Checking for existing Dashboard proxy provider..."
              if ! retry_api_call "${AUTHENTIK_HOST}/api/v3/providers/proxy/"; then
                echo "Failed to check existing proxy providers"
                exit 1
              fi

              PROVIDER_RESPONSE=$(cat /tmp/api_response)
              PROVIDER_EXISTS=$(echo "$PROVIDER_RESPONSE" | grep -o '"name":"dashboard-proxy"' || echo "")

              if [ -z "$PROVIDER_EXISTS" ]; then
                echo "Creating Dashboard proxy provider..."
                PROVIDER_DATA="{
                  \"name\": \"dashboard-proxy\",
                  \"authorization_flow\": \"${AUTH_FLOW_UUID}\",
                  \"external_host\": \"https://dashboard.k8s.home.geoffdavis.com\",
                  \"internal_host\": \"http://kubernetes-dashboard-web.kubernetes-dashboard.svc.cluster.local:8000\",
                  \"internal_host_ssl_validation\": false,
                  \"mode\": \"forward_single\",
                  \"cookie_domain\": \"k8s.home.geoffdavis.com\",
                  \"skip_path_regex\": \"^/api/.*$\",
                  \"basic_auth_enabled\": false,
                  \"basic_auth_password_attribute\": \"\",
                  \"basic_auth_user_attribute\": \"\"
                }"

                if retry_api_call "${AUTHENTIK_HOST}/api/v3/providers/proxy/" "POST" "$PROVIDER_DATA"; then
                  PROVIDER_PK=$(cat /tmp/api_response | grep -o '"pk":[0-9]*' | cut -d':' -f2)
                  echo "Created Dashboard proxy provider with PK: $PROVIDER_PK"
                else
                  echo "Failed to create Dashboard proxy provider"
                  exit 1
                fi
              else
                echo "Dashboard proxy provider already exists"
                PROVIDER_PK=$(echo "$PROVIDER_RESPONSE" | grep -A10 '"name":"dashboard-proxy"' | grep -o '"pk":[0-9]*' | cut -d':' -f2)
                echo "Found existing provider with PK: $PROVIDER_PK"
              fi

              # Check if Dashboard Application already exists
              echo "Checking for existing Dashboard application..."
              if ! retry_api_call "${AUTHENTIK_HOST}/api/v3/core/applications/"; then
                echo "Failed to check existing applications"
                exit 1
              fi

              APP_RESPONSE=$(cat /tmp/api_response)
              APP_EXISTS=$(echo "$APP_RESPONSE" | grep -o '"name":"Kubernetes Dashboard"' || echo "")

              if [ -z "$APP_EXISTS" ]; then
                echo "Creating Dashboard application..."
                APP_DATA="{
                  \"name\": \"Kubernetes Dashboard\",
                  \"slug\": \"dashboard\",
                  \"provider\": ${PROVIDER_PK},
                  \"meta_description\": \"Kubernetes cluster management dashboard\",
                  \"meta_publisher\": \"Kubernetes\",
                  \"meta_launch_url\": \"https://dashboard.k8s.home.geoffdavis.com\",
                  \"policy_engine_mode\": \"any\",
                  \"group\": \"\"
                }"

                if retry_api_call "${AUTHENTIK_HOST}/api/v3/core/applications/" "POST" "$APP_DATA"; then
                  echo "Dashboard application created successfully!"
                else
                  echo "Failed to create Dashboard application"
                  exit 1
                fi
              else
                echo "Dashboard application already exists"
              fi

              # Update the existing proxy outpost to include this provider
              echo "Updating proxy outpost to include Dashboard provider..."
              if ! retry_api_call "${AUTHENTIK_HOST}/api/v3/outposts/instances/"; then
                echo "Failed to check existing outposts"
                exit 1
              fi

              OUTPOST_RESPONSE=$(cat /tmp/api_response)
              OUTPOST_PK=$(echo "$OUTPOST_RESPONSE" | grep -A10 '"name":"proxy-outpost"' | grep -o '"pk":"[^"]*"' | cut -d'"' -f4)

              if [ -n "$OUTPOST_PK" ]; then
                echo "Found proxy outpost with PK: $OUTPOST_PK"
                # Get current providers list
                CURRENT_PROVIDERS=$(echo "$OUTPOST_RESPONSE" | grep -A10 '"name":"proxy-outpost"' | grep -o '"providers":\[[0-9,]*\]' | sed 's/"providers":\[\([0-9,]*\)\]/\1/')

                # Add new provider to the list if not already present
                if echo "$CURRENT_PROVIDERS" | grep -q "$PROVIDER_PK"; then
                  echo "Provider already in outpost"
                else
                  if [ -n "$CURRENT_PROVIDERS" ]; then
                    NEW_PROVIDERS="[$CURRENT_PROVIDERS,$PROVIDER_PK]"
                  else
                    NEW_PROVIDERS="[$PROVIDER_PK]"
                  fi

                  UPDATE_DATA="{\"providers\": $NEW_PROVIDERS}"

                  if retry_api_call "${AUTHENTIK_HOST}/api/v3/outposts/instances/${OUTPOST_PK}/" "PATCH" "$UPDATE_DATA"; then
                    echo "Updated proxy outpost with Dashboard provider!"
                  else
                    echo "Failed to update proxy outpost"
                    exit 1
                  fi
                fi
              else
                echo "Proxy outpost not found - it should be created by the longhorn config job first"
                exit 1
              fi

              echo "Dashboard proxy configuration completed successfully!"
