---
apiVersion: batch/v1
kind: Job
metadata:
  name: authentik-enhanced-token-setup
  namespace: authentik
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-weight: "5"
    flux.weave.works/automated: "false"
  labels:
    app.kubernetes.io/name: authentik-enhanced-token-setup
    app.kubernetes.io/component: configuration
    app.kubernetes.io/part-of: authentik
spec:
  backoffLimit: 5
  activeDeadlineSeconds: 900
  template:
    metadata:
      labels:
        app.kubernetes.io/name: authentik-enhanced-token-setup
        app.kubernetes.io/component: configuration
        app.kubernetes.io/part-of: authentik
    spec:
      restartPolicy: OnFailure
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      initContainers:
        - name: wait-for-authentik
          image: curlimages/curl:8.5.0
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/sh
            - -c
            - |
              echo "Waiting for Authentik server to be ready..."
              until curl -f -s http://authentik-server.authentik.svc.cluster.local/if/flow/initial-setup/ > /dev/null 2>&1; do
                echo "Authentik not ready yet, waiting 10 seconds..."
                sleep 10
              done
              echo "Authentik server is ready!"
      containers:
        - name: setup-enhanced-token
          image: ghcr.io/goauthentik/server:2024.8.3
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: AUTHENTIK_REDIS__HOST
              value: "authentik-redis-master.authentik.svc.cluster.local"
            - name: AUTHENTIK_POSTGRESQL__HOST
              valueFrom:
                secretKeyRef:
                  name: authentik-database-credentials
                  key: AUTHENTIK_POSTGRESQL__HOST
            - name: AUTHENTIK_POSTGRESQL__NAME
              valueFrom:
                secretKeyRef:
                  name: authentik-database-credentials
                  key: AUTHENTIK_POSTGRESQL__NAME
            - name: AUTHENTIK_POSTGRESQL__USER
              valueFrom:
                secretKeyRef:
                  name: authentik-database-credentials
                  key: AUTHENTIK_POSTGRESQL__USER
            - name: AUTHENTIK_POSTGRESQL__PASSWORD
              valueFrom:
                secretKeyRef:
                  name: authentik-database-credentials
                  key: AUTHENTIK_POSTGRESQL__PASSWORD
            - name: AUTHENTIK_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: authentik-config
                  key: AUTHENTIK_SECRET_KEY
          command:
            - /bin/bash
            - -c
            - |
              set -e
              echo "=== Enhanced Token Setup with 1-Year Expiry ==="
              echo "Starting enhanced admin user and long-lived API token setup..."
              
              # Use ak shell to create admin user and long-lived token
              ak shell -c "
              from authentik.core.models import User, Token
              from datetime import datetime, timedelta
              from django.utils import timezone
              import secrets
              import base64
              import json
              
              # Create or get the akadmin user
              user, created = User.objects.get_or_create(
                  username='akadmin',
                  defaults={
                      'name': 'Admin User',
                      'email': 'admin@k8s.home.geoffdavis.com',
                      'is_superuser': True
                  }
              )
              if created:
                  print(f'✓ Created user: {user.username}')
              else:
                  # Ensure existing user has proper permissions
                  user.is_superuser = True
                  user.save()
                  print(f'✓ Updated existing user: {user.username}')
              
              # Calculate 1-year expiry date
              now = timezone.now()
              expiry_date = now + timedelta(days=365)
              print(f'✓ Token expiry set to: {expiry_date.isoformat()}')
              
              # Check for existing tokens and their expiry
              existing_tokens = Token.objects.filter(user=user, intent='api')
              valid_tokens = []
              
              for token in existing_tokens:
                  if token.expires and token.expires > now:
                      days_remaining = (token.expires - now).days
                      print(f'ℹ Found existing valid token: {token.key[:8]}... (expires in {days_remaining} days)')
                      if days_remaining > 30:  # Keep tokens with more than 30 days
                          valid_tokens.append(token)
                      else:
                          print(f'⚠ Token {token.key[:8]}... expires soon, will be replaced')
                  else:
                      print(f'⚠ Found expired/invalid token: {token.key[:8]}...')
              
              # Create new token if no valid long-term tokens exist
              if not any(token for token in valid_tokens if (token.expires - now).days > 300):
                  # Delete old tokens to avoid conflicts
                  old_count = Token.objects.filter(user=user, intent='api').count()
                  Token.objects.filter(user=user, intent='api').delete()
                  if old_count > 0:
                      print(f'✓ Cleaned up {old_count} old tokens')
                  
                  # Create a new long-lived API token
                  token_key = secrets.token_hex(32)
                  token = Token.objects.create(
                      user=user,
                      intent='api',
                      key=token_key,
                      description=f'Long-lived RADIUS Outpost Token (1 year) - Created {now.strftime(\"%Y-%m-%d\")}',
                      expires=expiry_date,
                      expiring=True
                  )
                  print(f'✓ Created new 1-year token: {token.key[:8]}...')
                  
                  # Output token information for 1Password update
                  token_info = {
                      'token': token.key,
                      'expires': expiry_date.isoformat(),
                      'created': now.isoformat(),
                      'description': token.description,
                      'user': user.username
                  }
                  
                  # Output the token in base64 format for Kubernetes secret
                  token_b64 = base64.b64encode(token.key.encode()).decode()
                  print(f'✓ Token (base64): {token_b64}')
                  
                  # Output JSON for 1Password
                  print(f'✓ Token Info JSON: {json.dumps(token_info, indent=2)}')
                  
                  # Validate the token works
                  print('✓ Validating token...')
                  from django.test import Client
                  from django.contrib.auth import authenticate
                  
                  # Simple validation - if we got here, the token was created successfully
                  print('✓ Token validation: Token created and stored successfully')
                  
              else:
                  print('✓ Valid long-term token already exists, skipping creation')
                  for token in valid_tokens:
                      if (token.expires - datetime.now()).days > 300:
                          print(f'✓ Using existing token: {token.key[:8]}... (expires {token.expires.strftime(\"%Y-%m-%d\")})')
                          token_b64 = base64.b64encode(token.key.encode()).decode()
                          print(f'✓ Token (base64): {token_b64}')
                          break
              
              print('✓ Enhanced token setup completed successfully!')
              "
              
              echo "=== Token Setup Summary ==="
              echo "✓ Admin user configured with superuser privileges"
              echo "✓ Long-lived API token created/validated (1 year expiry)"
              echo "✓ Token ready for use with outpost configurations"
              echo "✓ Token information output for 1Password update"
              echo ""
              echo "Next steps:"
              echo "1. Update 1Password 'Authentik RADIUS Token - home-ops' entry with new token"
              echo "2. External Secrets will automatically sync the updated token"
              echo "3. Outpost configuration jobs will use the new long-lived token"
              echo ""
              echo "Enhanced token setup completed successfully!"