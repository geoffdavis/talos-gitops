---
apiVersion: batch/v1
kind: Job
metadata:
  name: authentik-enhanced-token-setup
  namespace: authentik
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-weight: "5"
    flux.weave.works/automated: "false"
  labels:
    app.kubernetes.io/name: authentik-enhanced-token-setup
    app.kubernetes.io/component: configuration
    app.kubernetes.io/part-of: authentik
spec:
  backoffLimit: 5
  activeDeadlineSeconds: 900
  template:
    metadata:
      labels:
        app.kubernetes.io/name: authentik-enhanced-token-setup
        app.kubernetes.io/component: configuration
        app.kubernetes.io/part-of: authentik
    spec:
      restartPolicy: OnFailure
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      volumes:
        - name: op-cli
          emptyDir: {}
      initContainers:
        - name: wait-for-authentik
          image: curlimages/curl:8.5.0
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/sh
            - -c
            - |
              echo "Waiting for Authentik server to be ready..."
              until curl -f -s http://authentik-server.authentik.svc.cluster.local/if/flow/initial-setup/ > /dev/null 2>&1; do
                echo "Authentik not ready yet, waiting 10 seconds..."
                sleep 10
              done
              echo "Authentik server is ready!"
      containers:
        - name: setup-enhanced-token
          image: ghcr.io/goauthentik/server:2024.8.3
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: AUTHENTIK_REDIS__HOST
              value: "authentik-redis-master.authentik.svc.cluster.local"
            - name: AUTHENTIK_POSTGRESQL__HOST
              valueFrom:
                secretKeyRef:
                  name: authentik-database-credentials
                  key: AUTHENTIK_POSTGRESQL__HOST
            - name: AUTHENTIK_POSTGRESQL__NAME
              valueFrom:
                secretKeyRef:
                  name: authentik-database-credentials
                  key: AUTHENTIK_POSTGRESQL__NAME
            - name: AUTHENTIK_POSTGRESQL__USER
              valueFrom:
                secretKeyRef:
                  name: authentik-database-credentials
                  key: AUTHENTIK_POSTGRESQL__USER
            - name: AUTHENTIK_POSTGRESQL__PASSWORD
              valueFrom:
                secretKeyRef:
                  name: authentik-database-credentials
                  key: AUTHENTIK_POSTGRESQL__PASSWORD
            - name: AUTHENTIK_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: authentik-config
                  key: AUTHENTIK_SECRET_KEY
            - name: OP_CONNECT_HOST
              value: "http://onepassword-connect.onepassword-connect.svc.cluster.local:8080"
            - name: OP_CONNECT_TOKEN
              valueFrom:
                secretKeyRef:
                  name: onepassword-connect-token
                  key: token
          volumeMounts:
            - name: op-cli
              mountPath: /tmp/op-cli
          command:
            - python3
            - -c
            - |
              import os
              import sys
              import json
              import base64
              import secrets
              import urllib.request
              import urllib.parse
              import subprocess
              from datetime import datetime, timedelta

              print("=== Enhanced Token Setup with 1-Year Expiry ===")
              print("Starting enhanced admin user and long-lived API token setup...")

              # First, run the Authentik shell command to create/update user and token
              ak_script = '''
              from authentik.core.models import User, Token
              from datetime import datetime, timedelta
              from django.utils import timezone
              import secrets
              import base64
              import json

              # Create or get the akadmin user
              user, created = User.objects.get_or_create(
                  username='akadmin',
                  defaults={
                      'name': 'Admin User',
                      'email': 'admin@k8s.home.geoffdavis.com',
                      'is_superuser': True
                  }
              )
              if created:
                  print(f'✓ Created user: {user.username}')
              else:
                  # Ensure existing user has proper permissions
                  user.is_superuser = True
                  user.save()
                  print(f'✓ Updated existing user: {user.username}')

              # Calculate 1-year expiry date
              now = timezone.now()
              expiry_date = now + timedelta(days=365)
              print(f'✓ Token expiry set to: {expiry_date.isoformat()}')

              # Check for existing tokens and their expiry
              existing_tokens = Token.objects.filter(user=user, intent='api')
              valid_tokens = []

              for token in existing_tokens:
                  if token.expires and token.expires > now:
                      days_remaining = (token.expires - now).days
                      print(f'ℹ Found existing valid token: {token.key[:8]}... (expires in {days_remaining} days)')
                      if days_remaining > 30:  # Keep tokens with more than 30 days
                          valid_tokens.append(token)
                      else:
                          print(f'⚠ Token {token.key[:8]}... expires soon, will be replaced')
                  else:
                      print(f'⚠ Found expired/invalid token: {token.key[:8]}...')

              # Create new token if no valid long-term tokens exist
              if not any(token for token in valid_tokens if (token.expires - now).days > 300):
                  # Delete old tokens to avoid conflicts
                  old_count = Token.objects.filter(user=user, intent='api').count()
                  Token.objects.filter(user=user, intent='api').delete()
                  if old_count > 0:
                      print(f'✓ Cleaned up {old_count} old tokens')

                  # Create a new long-lived API token
                  token_key = secrets.token_hex(32)
                  token = Token.objects.create(
                      user=user,
                      intent='api',
                      key=token_key,
                      description=f'Long-lived RADIUS Outpost Token (1 year) - Created {now.strftime("%Y-%m-%d")}',
                      expires=expiry_date,
                      expiring=True
                  )
                  print(f'✓ Created new 1-year token: {token.key[:8]}...')

                  # Output token information for 1Password update
                  token_info = {
                      'token': token.key,
                      'expires': expiry_date.isoformat(),
                      'created': now.isoformat(),
                      'description': token.description,
                      'user': user.username
                  }

                  # Output the token in base64 format for Kubernetes secret
                  token_b64 = base64.b64encode(token.key.encode()).decode()
                  print(f'✓ Token (base64): {token_b64}')

                  # Output JSON for 1Password
                  print(f'✓ Token Info JSON: {json.dumps(token_info, indent=2)}')

                  # Validate the token works
                  print('✓ Validating token...')
                  print('✓ Token validation: Token created and stored successfully')

              else:
                  print('✓ Valid long-term token already exists, skipping creation')
                  for token in valid_tokens:
                      if (token.expires - now).days > 300:
                          print(f'✓ Using existing token: {token.key[:8]}... (expires {token.expires.strftime("%Y-%m-%d")})')
                          token_b64 = base64.b64encode(token.key.encode()).decode()
                          print(f'✓ Token (base64): {token_b64}')
                          break

              print('✓ Enhanced token setup completed successfully!')

              # Store the token info for 1Password update
              with open('/tmp/token_info.json', 'w') as f:
                  if 'token_info' in locals():
                      f.write(json.dumps(token_info, indent=2))
                  else:
                      # Use existing token info
                      for token in valid_tokens:
                          if (token.expires - now).days > 300:
                              existing_info = {
                                  'token': token.key,
                                  'expires': token.expires.isoformat(),
                                  'created': token.created.isoformat() if hasattr(token, 'created') else now.isoformat(),
                                  'description': token.description,
                                  'user': user.username,
                                  'last_rotation': now.isoformat(),
                                  'rotation_status': 'active'
                              }
                              f.write(json.dumps(existing_info, indent=2))
                              break
              '''

              # Run the Authentik shell command
              try:
                  result = subprocess.run(['ak', 'shell', '-c', ak_script],
                                        capture_output=True, text=True, check=True)
                  print(result.stdout)
                  if result.stderr:
                      print(f"Warnings: {result.stderr}")
              except subprocess.CalledProcessError as e:
                  print(f"✗ Failed to run ak shell command: {e}")
                  print(f"stdout: {e.stdout}")
                  print(f"stderr: {e.stderr}")
                  sys.exit(1)

              print("\n=== Updating 1Password ===")
              print("Updating 1Password item 'Authentik Admin Token' with new token information...")

              # Check if token info file exists
              if os.path.exists('/tmp/token_info.json'):
                  print("✓ Token information file found, using 1Password Connect API...")

                  # Read token information
                  with open('/tmp/token_info.json', 'r') as f:
                      token_data = json.load(f)

                  token = token_data['token']
                  expires = token_data['expires']
                  created = token_data['created']
                  description = token_data['description']
                  user = token_data['user']
                  last_rotation = token_data.get('last_rotation', created)
                  rotation_status = token_data.get('rotation_status', 'active')

                  print('✓ Token information loaded from Authentik')
                  print('Updating 1Password item via Connect API: Authentik Admin Token')

                  # Get environment variables
                  connect_host = os.environ.get('OP_CONNECT_HOST')
                  connect_token = os.environ.get('OP_CONNECT_TOKEN')

                  if not connect_host or not connect_token:
                      print('✗ Missing 1Password Connect configuration')
                      sys.exit(1)

                  # Prepare headers
                  headers = {
                      'Authorization': f'Bearer {connect_token}',
                      'Content-Type': 'application/json'
                  }

                  # First, get all vaults to find the Automation vault ID
                  try:
                      req = urllib.request.Request(f'{connect_host}/v1/vaults', headers=headers)
                      with urllib.request.urlopen(req) as response:
                          vaults = json.loads(response.read().decode())

                      automation_vault_id = None
                      for vault in vaults:
                          if vault['name'] == 'Automation':
                              automation_vault_id = vault['id']
                              break

                      if not automation_vault_id:
                          print('✗ Could not find Automation vault')
                          sys.exit(1)

                      print(f'✓ Found Automation vault: {automation_vault_id}')
                  except Exception as e:
                      print(f'✗ Failed to get vaults: {e}')
                      sys.exit(1)

                  # Check if item exists by searching for it
                  try:
                      # Properly URL encode the filter parameter
                      filter_param = urllib.parse.quote('title eq "Authentik Outpost Token - home-ops"')
                      search_url = f'{connect_host}/v1/vaults/{automation_vault_id}/items?filter={filter_param}'
                      req = urllib.request.Request(search_url, headers=headers)
                      with urllib.request.urlopen(req) as response:
                          items = json.loads(response.read().decode())

                      item_exists = len(items) > 0
                      item_id = items[0]['id'] if item_exists else None

                      if item_exists:
                          print(f'✓ Item already exists with ID: {item_id}')
                          print('✓ Skipping creation to prevent duplicates (idempotent operation)')
                      else:
                          print('✓ Item does not exist, will create new one')
                  except Exception as e:
                      print(f'✗ Failed to search for existing item: {e}')
                      item_exists = False
                      item_id = None

                  # Prepare item data with secondary token fields for rotation overlap
                  item_data = {
                      'title': 'Authentik Outpost Token - home-ops',
                      'category': 'API_CREDENTIAL',
                      'vault': {'id': automation_vault_id},
                      'fields': [
                          # Primary token fields (active)
                          {'id': 'token', 'type': 'CONCEALED', 'label': 'token', 'value': token},
                          {'id': 'expires', 'type': 'STRING', 'label': 'expires', 'value': expires},
                          {'id': 'created', 'type': 'STRING', 'label': 'created', 'value': created},
                          {'id': 'description', 'type': 'STRING', 'label': 'description', 'value': description},
                          {'id': 'user', 'type': 'STRING', 'label': 'user', 'value': user},
                          {'id': 'last_rotation', 'type': 'STRING', 'label': 'last_rotation', 'value': last_rotation},
                          {'id': 'rotation_status', 'type': 'STRING', 'label': 'rotation_status', 'value': rotation_status},
                          # Secondary token fields (for rotation overlap - initially empty)
                          {'id': 'token_secondary', 'type': 'CONCEALED', 'label': 'token_secondary', 'value': ''},
                          {'id': 'expires_secondary', 'type': 'STRING', 'label': 'expires_secondary', 'value': ''},
                          {'id': 'created_secondary', 'type': 'STRING', 'label': 'created_secondary', 'value': ''}
                      ]
                  }

                  try:
                      if item_exists and item_id:
                          # Update existing item with new token data
                          url = f'{connect_host}/v1/vaults/{automation_vault_id}/items/{item_id}'
                          data = json.dumps(item_data).encode('utf-8')
                          req = urllib.request.Request(url, data=data, headers=headers, method='PUT')
                          with urllib.request.urlopen(req) as response:
                              result = json.loads(response.read().decode())
                          print('✓ 1Password item "Authentik Outpost Token - home-ops" updated successfully via Connect API')
                      else:
                          # Create new item only if it does not exist
                          url = f'{connect_host}/v1/vaults/{automation_vault_id}/items'
                          data = json.dumps(item_data).encode('utf-8')
                          req = urllib.request.Request(url, data=data, headers=headers, method='POST')
                          with urllib.request.urlopen(req) as response:
                              result = json.loads(response.read().decode())
                          print('✓ 1Password item "Authentik Outpost Token - home-ops" created successfully via Connect API')
                  except Exception as e:
                      print(f'✗ Failed to create/update 1Password item via Connect API: {e}')
                      sys.exit(1)
              else:
                  print("⚠ No new token created, 1Password update skipped")

              print("\n=== Token Rotation Config ===")
              print("✓ Token rotation configuration is now managed via ConfigMap (not 1Password)")
              print("✓ Configuration values are stored in authentik-token-rotation-config ConfigMap")

              print("\n=== Refreshing External Secrets ===")
              print("Forcing external secrets to refresh and pick up updated token...")

              # Force refresh of external secrets by adding timestamp annotation
              import time
              timestamp = str(int(time.time()))

              try:
                  subprocess.run(['kubectl', 'annotate', 'externalsecret', 'authentik-radius-token',
                                '-n', 'authentik', f'force-sync={timestamp}', '--overwrite'],
                               check=True, capture_output=True)
                  print("✓ Refreshed authentik-radius-token external secret")
              except subprocess.CalledProcessError:
                  print("⚠ Could not refresh authentik-radius-token external secret")

              try:
                  subprocess.run(['kubectl', 'annotate', 'externalsecret', 'authentik-admin-token-enhanced',
                                '-n', 'authentik', f'force-sync={timestamp}', '--overwrite'],
                               check=True, capture_output=True)
                  print("✓ Refreshed authentik-admin-token-enhanced external secret")
              except subprocess.CalledProcessError:
                  print("⚠ Could not refresh authentik-admin-token-enhanced external secret")

              print("✓ External secret refresh annotations added")
              print("Waiting 10 seconds for external secrets to sync...")
              time.sleep(10)

              print("\n=== Token Setup Summary ===")
              print("✓ Admin user configured with superuser privileges")
              print("✓ Long-lived API token created/validated (1 year expiry)")
              print("✓ 1Password item 'Authentik Outpost Token - home-ops' updated/created (idempotent)")
              print("✓ Token rotation configuration managed via ConfigMap (not 1Password)")
              print("✓ External Secrets refreshed to sync the updated token")
              print("✓ Token ready for use with outpost configurations")
              print("✓ Idempotent operation - safe to run multiple times")
              print("")
              print("Enhanced token setup completed successfully!")
