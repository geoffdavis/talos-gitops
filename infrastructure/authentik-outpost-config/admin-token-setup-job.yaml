---
apiVersion: batch/v1
kind: Job
metadata:
  name: authentik-admin-token-setup
  namespace: authentik
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-weight: "5"
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: authentik-admin-token-setup
        app.kubernetes.io/component: configuration
    spec:
      restartPolicy: OnFailure
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      initContainers:
        - name: wait-for-authentik
          image: curlimages/curl:8.5.0
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/sh
            - -c
            - |
              echo "Waiting for Authentik server to be ready..."
              until curl -f -s http://authentik-server.authentik.svc.cluster.local/if/flow/initial-setup/ > /dev/null 2>&1; do
                echo "Authentik not ready yet, waiting 10 seconds..."
                sleep 10
              done
              echo "Authentik server is ready!"
      containers:
        - name: setup-admin-token
          image: ghcr.io/goauthentik/server:2024.8.3
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: AUTHENTIK_REDIS__HOST
              value: "authentik-redis-master.authentik.svc.cluster.local"
            - name: AUTHENTIK_POSTGRESQL__HOST
              value: "postgresql-cluster-rw.postgresql-cluster.svc.cluster.local"
            - name: AUTHENTIK_POSTGRESQL__NAME
              value: "authentik"
            - name: AUTHENTIK_POSTGRESQL__USER
              valueFrom:
                secretKeyRef:
                  name: authentik-db
                  key: username
            - name: AUTHENTIK_POSTGRESQL__PASSWORD
              valueFrom:
                secretKeyRef:
                  name: authentik-db
                  key: password
          command:
            - /bin/bash
            - -c
            - |
              set -e
              echo "Setting up admin user and API token..."
              
              # Use ak shell to create admin user and token
              ak shell -c "
              from authentik.core.models import User, Token
              import secrets
              import base64
              
              # Create or get the akadmin user
              user, created = User.objects.get_or_create(
                  username='akadmin',
                  defaults={
                      'name': 'Admin User',
                      'email': 'admin@k8s.home.geoffdavis.com',
                      'is_superuser': True
                  }
              )
              if created:
                  print(f'Created user: {user.username}')
              else:
                  # Ensure existing user has proper permissions
                  user.is_superuser = True
                  user.save()
                  print(f'Updated existing user: {user.username}')
              
              # Delete any existing API tokens for this user to avoid conflicts
              Token.objects.filter(user=user, intent='api').delete()
              
              # Create a new API token for this user
              token_key = secrets.token_hex(32)
              token = Token.objects.create(
                  user=user,
                  intent='api',
                  key=token_key,
                  description='RADIUS Outpost Configuration Token'
              )
              print(f'Created new token: {token.key}')
              
              # Output the token in base64 format for easy patching
              token_b64 = base64.b64encode(token.key.encode()).decode()
              print(f'Token (base64): {token_b64}')
              "
              
              echo "Admin token setup completed!"