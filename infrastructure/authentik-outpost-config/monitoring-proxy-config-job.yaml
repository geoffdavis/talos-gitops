---
apiVersion: batch/v1
kind: Job
metadata:
  name: authentik-monitoring-proxy-config
  namespace: authentik
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-weight: "18"
spec:
  backoffLimit: 3
  activeDeadlineSeconds: 600
  template:
    metadata:
      labels:
        app.kubernetes.io/name: authentik-monitoring-config
        app.kubernetes.io/component: configuration
    spec:
      restartPolicy: OnFailure
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      initContainers:
        - name: wait-for-authentik
          image: curlimages/curl:8.5.0
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/sh
            - -c
            - |
              echo "Waiting for Authentik server to be ready..."
              until curl -f -s http://authentik-server.authentik.svc.cluster.local/if/flow/initial-setup/ > /dev/null 2>&1; do
                echo "Authentik not ready yet, waiting 10 seconds..."
                sleep 10
              done
              echo "Authentik server is ready!"
      containers:
        - name: configure-monitoring-proxy
          image: curlimages/curl:8.5.0
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: AUTHENTIK_HOST
              value: "http://authentik-server.authentik.svc.cluster.local"
            - name: AUTHENTIK_TOKEN
              valueFrom:
                secretKeyRef:
                  name: authentik-admin-token
                  key: token
          command:
            - /bin/sh
            - -c
            - |
              set -e
              echo "Configuring monitoring services proxy providers and applications..."

              # Function to retry API calls
              retry_api_call() {
                local url="$1"
                local method="${2:-GET}"
                local data="${3:-}"
                local max_retries=3
                local retry_count=0

                while [ $retry_count -lt $max_retries ]; do
                  if [ "$method" = "POST" ] && [ -n "$data" ]; then
                    response=$(curl -s -w "%{http_code}" -o /tmp/api_response \
                      -X POST \
                      -H "Authorization: Bearer ${ADMIN_TOKEN}" \
                      -H "Content-Type: application/json" \
                      -d "$data" \
                      "$url")
                  elif [ "$method" = "PATCH" ] && [ -n "$data" ]; then
                    response=$(curl -s -w "%{http_code}" -o /tmp/api_response \
                      -X PATCH \
                      -H "Authorization: Bearer ${ADMIN_TOKEN}" \
                      -H "Content-Type: application/json" \
                      -d "$data" \
                      "$url")
                  else
                    response=$(curl -s -w "%{http_code}" -o /tmp/api_response \
                      -H "Authorization: Bearer ${ADMIN_TOKEN}" \
                      "$url")
                  fi

                  if [ "$response" = "200" ] || [ "$response" = "201" ]; then
                    return 0
                  fi

                  retry_count=$((retry_count + 1))
                  echo "API call failed with status $response, retry $retry_count/$max_retries"
                  if [ $retry_count -lt $max_retries ]; then
                    sleep 5
                  fi
                done

                echo "API call failed after $max_retries retries"
                cat /tmp/api_response
                return 1
              }

              # Function to create provider and application
              create_provider_and_app() {
                local service_name="$1"
                local display_name="$2"
                local external_host="$3"
                local internal_host="$4"
                local description="$5"
                local publisher="$6"

                echo "Processing $service_name..."

                # Check if provider already exists
                echo "Checking for existing $service_name proxy provider..."
                if ! retry_api_call "${AUTHENTIK_HOST}/api/v3/providers/proxy/"; then
                  echo "Failed to check existing proxy providers"
                  return 1
                fi

                PROVIDER_RESPONSE=$(cat /tmp/api_response)
                PROVIDER_EXISTS=$(echo "$PROVIDER_RESPONSE" | grep -o "\"name\":\"${service_name}-proxy\"" || echo "")

                if [ -z "$PROVIDER_EXISTS" ]; then
                  echo "Creating $service_name proxy provider..."
                  PROVIDER_DATA="{
                    \"name\": \"${service_name}-proxy\",
                    \"authorization_flow\": \"${AUTH_FLOW_UUID}\",
                    \"external_host\": \"${external_host}\",
                    \"internal_host\": \"${internal_host}\",
                    \"internal_host_ssl_validation\": false,
                    \"mode\": \"forward_single\",
                    \"cookie_domain\": \"k8s.home.geoffdavis.com\",
                    \"skip_path_regex\": \"^/api/.*$\",
                    \"basic_auth_enabled\": false,
                    \"basic_auth_password_attribute\": \"\",
                    \"basic_auth_user_attribute\": \"\"
                  }"

                  if retry_api_call "${AUTHENTIK_HOST}/api/v3/providers/proxy/" "POST" "$PROVIDER_DATA"; then
                    PROVIDER_PK=$(cat /tmp/api_response | grep -o '"pk":[0-9]*' | cut -d':' -f2)
                    echo "Created $service_name proxy provider with PK: $PROVIDER_PK"
                  else
                    echo "Failed to create $service_name proxy provider after retries"
                    return 1
                  fi
                else
                  echo "$service_name proxy provider already exists"
                  PROVIDER_PK=$(echo "$PROVIDER_RESPONSE" | grep -A10 "\"name\":\"${service_name}-proxy\"" | grep -o '"pk":[0-9]*' | cut -d':' -f2)
                  echo "Found existing provider with PK: $PROVIDER_PK"
                fi

                # Check if Application already exists
                echo "Checking for existing $service_name application..."
                if ! retry_api_call "${AUTHENTIK_HOST}/api/v3/core/applications/"; then
                  echo "Failed to check existing applications"
                  return 1
                fi

                APP_RESPONSE=$(cat /tmp/api_response)
                APP_EXISTS=$(echo "$APP_RESPONSE" | grep -o "\"name\":\"${display_name}\"" || echo "")

                if [ -z "$APP_EXISTS" ]; then
                  echo "Creating $service_name application..."
                  APP_DATA="{
                    \"name\": \"${display_name}\",
                    \"slug\": \"${service_name}\",
                    \"provider\": ${PROVIDER_PK},
                    \"meta_description\": \"${description}\",
                    \"meta_publisher\": \"${publisher}\",
                    \"meta_launch_url\": \"${external_host}\",
                    \"policy_engine_mode\": \"any\",
                    \"group\": \"\"
                  }"

                  if retry_api_call "${AUTHENTIK_HOST}/api/v3/core/applications/" "POST" "$APP_DATA"; then
                    echo "$service_name application created successfully!"
                  else
                    echo "Failed to create $service_name application after retries"
                    return 1
                  fi
                else
                  echo "$service_name application already exists"
                fi

                # Add provider to outpost
                echo "Adding $service_name provider to proxy outpost..."
                if ! retry_api_call "${AUTHENTIK_HOST}/api/v3/outposts/instances/"; then
                  echo "Failed to check existing outposts"
                  return 1
                fi

                OUTPOST_RESPONSE=$(cat /tmp/api_response)
                OUTPOST_PK=$(echo "$OUTPOST_RESPONSE" | grep -A10 '"name":"proxy-outpost"' | grep -o '"pk":[0-9]*' | cut -d':' -f2)

                if [ -n "$OUTPOST_PK" ]; then
                  echo "Found proxy outpost with PK: $OUTPOST_PK"
                  # Get current providers list
                  CURRENT_PROVIDERS=$(echo "$OUTPOST_RESPONSE" | grep -A10 '"name":"proxy-outpost"' | grep -o '"providers":\[[0-9,]*\]' | sed 's/"providers":\[\([0-9,]*\)\]/\1/')

                  # Add new provider to the list if not already present
                  if echo "$CURRENT_PROVIDERS" | grep -q "$PROVIDER_PK"; then
                    echo "Provider already in outpost"
                  else
                    if [ -n "$CURRENT_PROVIDERS" ]; then
                      NEW_PROVIDERS="[$CURRENT_PROVIDERS,$PROVIDER_PK]"
                    else
                      NEW_PROVIDERS="[$PROVIDER_PK]"
                    fi

                    UPDATE_DATA="{\"providers\": $NEW_PROVIDERS}"

                    if retry_api_call "${AUTHENTIK_HOST}/api/v3/outposts/instances/${OUTPOST_PK}/" "PATCH" "$UPDATE_DATA"; then
                      echo "Updated proxy outpost with $service_name provider!"
                    else
                      echo "Failed to update proxy outpost"
                      return 1
                    fi
                  fi
                else
                  echo "Proxy outpost not found - it should be created by the longhorn config job first"
                  return 1
                fi

                echo "$service_name configuration completed!"
                return 0
              }

              # Get admin token
              ADMIN_TOKEN="${AUTHENTIK_TOKEN}"

              # Test authentication first with retry
              echo "Testing authentication..."
              if ! retry_api_call "${AUTHENTIK_HOST}/api/v3/core/users/me/"; then
                echo "ERROR: API token authentication failed after retries."
                echo "The token may not have sufficient permissions."
                echo "Please ensure the admin-token-setup job has run successfully."
                exit 1
              fi
              echo "Authentication successful"

              # Use the same authorization flow as other providers
              AUTH_FLOW_UUID="be0ee023-11fe-4a43-b453-bc67957cafbf"
              echo "Using authorization flow: $AUTH_FLOW_UUID"

              # Configure Grafana
              create_provider_and_app "grafana" "Grafana" \
                "https://grafana.k8s.home.geoffdavis.com" \
                "http://kube-prometheus-stack-grafana.monitoring.svc.cluster.local:80" \
                "Grafana monitoring and visualization dashboard" \
                "Grafana Labs"

              # Configure Prometheus
              create_provider_and_app "prometheus" "Prometheus" \
                "https://prometheus.k8s.home.geoffdavis.com" \
                "http://kube-prometheus-stack-prometheus.monitoring.svc.cluster.local:9090" \
                "Prometheus metrics collection and querying interface" \
                "Prometheus"

              # Configure AlertManager
              create_provider_and_app "alertmanager" "AlertManager" \
                "https://alertmanager.k8s.home.geoffdavis.com" \
                "http://kube-prometheus-stack-alertmanager.monitoring.svc.cluster.local:9093" \
                "AlertManager alert routing and management interface" \
                "Prometheus"

              echo "All monitoring services proxy configuration completed!"
