---
apiVersion: batch/v1
kind: Job
metadata:
  name: authentik-longhorn-proxy-config
  namespace: authentik
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-weight: "15"
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: authentik-longhorn-config
        app.kubernetes.io/component: configuration
    spec:
      restartPolicy: OnFailure
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      initContainers:
        - name: wait-for-authentik
          image: curlimages/curl:8.5.0
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/sh
            - -c
            - |
              echo "Waiting for Authentik server to be ready..."
              until curl -f -s http://authentik-server.authentik.svc.cluster.local/if/flow/initial-setup/ > /dev/null 2>&1; do
                echo "Authentik not ready yet, waiting 10 seconds..."
                sleep 10
              done
              echo "Authentik server is ready!"
      containers:
        - name: configure-longhorn-proxy
          image: curlimages/curl:8.5.0
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: AUTHENTIK_HOST
              value: "http://authentik-server.authentik.svc.cluster.local"
            - name: AUTHENTIK_TOKEN
              valueFrom:
                secretKeyRef:
                  name: authentik-radius-token
                  key: token
          command:
            - /bin/sh
            - -c
            - |
              set -e
              echo "Configuring Longhorn proxy provider and application..."
              
              # Get admin token
              ADMIN_TOKEN="${AUTHENTIK_TOKEN}"
              
              # Test authentication first
              echo "Testing authentication..."
              AUTH_TEST=$(curl -s -w "%{http_code}" -o /tmp/auth_test -H "Authorization: Bearer ${ADMIN_TOKEN}" \
                "${AUTHENTIK_HOST}/api/v3/core/users/me/")
              if [ "$AUTH_TEST" != "200" ]; then
                echo "Authentication failed with status: $AUTH_TEST"
                cat /tmp/auth_test
                echo ""
                echo "ERROR: API token authentication failed."
                exit 1
              fi
              echo "Authentication successful"
              
              # Use the same authorization flow as RADIUS provider
              AUTH_FLOW_UUID="be0ee023-11fe-4a43-b453-bc67957cafbf"
              echo "Using authorization flow: $AUTH_FLOW_UUID"
              
              # Check if Longhorn proxy provider already exists
              echo "Checking for existing Longhorn proxy provider..."
              PROVIDER_RESPONSE=$(curl -s -H "Authorization: Bearer ${ADMIN_TOKEN}" \
                "${AUTHENTIK_HOST}/api/v3/providers/proxy/")
              echo "Provider response: $PROVIDER_RESPONSE"
              
              PROVIDER_EXISTS=$(echo "$PROVIDER_RESPONSE" | grep -o '"name":"longhorn-proxy"' || echo "")
              
              if [ -z "$PROVIDER_EXISTS" ]; then
                echo "Creating Longhorn proxy provider..."
                PROVIDER_CREATE_RESPONSE=$(curl -s -w "%{http_code}" -o /tmp/provider_response \
                  -X POST \
                  -H "Authorization: Bearer ${ADMIN_TOKEN}" \
                  -H "Content-Type: application/json" \
                  -d "{
                    \"name\": \"longhorn-proxy\",
                    \"authorization_flow\": \"${AUTH_FLOW_UUID}\",
                    \"external_host\": \"https://longhorn.k8s.home.geoffdavis.com\",
                    \"internal_host\": \"http://longhorn-frontend.longhorn-system.svc.cluster.local\",
                    \"internal_host_ssl_validation\": false,
                    \"mode\": \"forward_auth\",
                    \"cookie_domain\": \"k8s.home.geoffdavis.com\",
                    \"skip_path_regex\": \"^/api/.*$\",
                    \"basic_auth_enabled\": false,
                    \"basic_auth_password_attribute\": \"\",
                    \"basic_auth_user_attribute\": \"\"
                  }" \
                  "${AUTHENTIK_HOST}/api/v3/providers/proxy/")
                
                if [ "$PROVIDER_CREATE_RESPONSE" = "201" ]; then
                  PROVIDER_PK=$(cat /tmp/provider_response | grep -o '"pk":[0-9]*' | cut -d':' -f2)
                  echo "Created Longhorn proxy provider with PK: $PROVIDER_PK"
                else
                  echo "Failed to create Longhorn proxy provider. Status: $PROVIDER_CREATE_RESPONSE"
                  cat /tmp/provider_response
                  exit 1
                fi
              else
                echo "Longhorn proxy provider already exists"
                PROVIDER_PK=$(echo "$PROVIDER_RESPONSE" | grep -A10 '"name":"longhorn-proxy"' | grep -o '"pk":[0-9]*' | cut -d':' -f2)
                echo "Found existing provider with PK: $PROVIDER_PK"
              fi
              
              # Check if Longhorn Application already exists
              echo "Checking for existing Longhorn application..."
              APP_RESPONSE=$(curl -s -H "Authorization: Bearer ${ADMIN_TOKEN}" \
                "${AUTHENTIK_HOST}/api/v3/core/applications/")
              echo "Application response: $APP_RESPONSE"
              
              APP_EXISTS=$(echo "$APP_RESPONSE" | grep -o '"name":"Longhorn Storage"' || echo "")
              
              if [ -z "$APP_EXISTS" ]; then
                echo "Creating Longhorn application..."
                APP_CREATE_RESPONSE=$(curl -s -w "%{http_code}" -o /tmp/app_response \
                  -X POST \
                  -H "Authorization: Bearer ${ADMIN_TOKEN}" \
                  -H "Content-Type: application/json" \
                  -d "{
                    \"name\": \"Longhorn Storage\",
                    \"slug\": \"longhorn\",
                    \"provider\": ${PROVIDER_PK},
                    \"meta_description\": \"Longhorn distributed block storage management interface\",
                    \"meta_publisher\": \"Longhorn\",
                    \"meta_launch_url\": \"https://longhorn.k8s.home.geoffdavis.com\",
                    \"policy_engine_mode\": \"any\",
                    \"group\": \"\"
                  }" \
                  "${AUTHENTIK_HOST}/api/v3/core/applications/")
                
                if [ "$APP_CREATE_RESPONSE" = "201" ]; then
                  echo "Longhorn application created successfully!"
                  cat /tmp/app_response
                else
                  echo "Failed to create Longhorn application. Status: $APP_CREATE_RESPONSE"
                  cat /tmp/app_response
                  exit 1
                fi
              else
                echo "Longhorn application already exists"
              fi
              
              # Check if proxy outpost already exists
              echo "Checking for existing proxy outpost..."
              OUTPOST_RESPONSE=$(curl -s -H "Authorization: Bearer ${ADMIN_TOKEN}" \
                "${AUTHENTIK_HOST}/api/v3/outposts/instances/")
              echo "Outpost response: $OUTPOST_RESPONSE"
              
              OUTPOST_EXISTS=$(echo "$OUTPOST_RESPONSE" | grep -o '"name":"proxy-outpost"' || echo "")
              
              if [ -z "$OUTPOST_EXISTS" ]; then
                echo "Creating proxy outpost..."
                OUTPOST_CREATE_RESPONSE=$(curl -s -w "%{http_code}" -o /tmp/outpost_response \
                  -X POST \
                  -H "Authorization: Bearer ${ADMIN_TOKEN}" \
                  -H "Content-Type: application/json" \
                  -d "{
                    \"name\": \"proxy-outpost\",
                    \"type\": \"proxy\",
                    \"providers\": [${PROVIDER_PK}],
                    \"config\": {
                      \"authentik_host\": \"http://authentik-server.authentik.svc.cluster.local\",
                      \"authentik_host_insecure\": true,
                      \"log_level\": \"info\",
                      \"object_naming\": \"goauthentik.io/outpost/%(name)s\",
                      \"docker_network\": null,
                      \"docker_map_ports\": true,
                      \"container_image\": null,
                      \"kubernetes_replicas\": 1,
                      \"kubernetes_namespace\": \"authentik\",
                      \"kubernetes_ingress_annotations\": {},
                      \"kubernetes_ingress_secret_name\": \"authentik-outpost-tls\",
                      \"kubernetes_service_type\": \"ClusterIP\",
                      \"kubernetes_disabled_components\": [],
                      \"kubernetes_image_pull_secrets\": []
                    }
                  }" \
                  "${AUTHENTIK_HOST}/api/v3/outposts/instances/")
                
                if [ "$OUTPOST_CREATE_RESPONSE" = "201" ]; then
                  echo "Proxy outpost created successfully!"
                  cat /tmp/outpost_response
                else
                  echo "Failed to create proxy outpost. Status: $OUTPOST_CREATE_RESPONSE"
                  cat /tmp/outpost_response
                  exit 1
                fi
              else
                echo "Proxy outpost already exists"
              fi
              
              echo "Longhorn proxy configuration completed!"