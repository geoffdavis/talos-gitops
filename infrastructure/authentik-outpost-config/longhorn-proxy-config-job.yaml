---
apiVersion: batch/v1
kind: Job
metadata:
  name: authentik-longhorn-proxy-config
  namespace: authentik
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-weight: "15"
spec:
  backoffLimit: 5
  activeDeadlineSeconds: 900
  template:
    metadata:
      labels:
        app.kubernetes.io/name: authentik-longhorn-config
        app.kubernetes.io/component: configuration
    spec:
      restartPolicy: OnFailure
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      initContainers:
        - name: wait-for-authentik
          image: curlimages/curl:8.5.0
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/sh
            - -c
            - |
              echo "Waiting for Authentik server to be ready..."
              until curl -f -s http://authentik-server.authentik.svc.cluster.local/if/flow/initial-setup/ > /dev/null 2>&1; do
                echo "Authentik not ready yet, waiting 10 seconds..."
                sleep 10
              done
              echo "Authentik server is ready!"
      containers:
        - name: configure-longhorn-proxy
          image: curlimages/curl:8.5.0
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: AUTHENTIK_HOST
              value: "http://authentik-server.authentik.svc.cluster.local"
            - name: AUTHENTIK_TOKEN
              valueFrom:
                secretKeyRef:
                  name: authentik-admin-token
                  key: token
          command:
            - /bin/sh
            - -c
            - |
              set -e
              echo "Configuring Longhorn proxy provider and application..."

              # Function to retry API calls
              retry_api_call() {
                local url="$1"
                local method="${2:-GET}"
                local data="${3:-}"
                local max_retries=3
                local retry_count=0
                
                while [ $retry_count -lt $max_retries ]; do
                  if [ "$method" = "POST" ] && [ -n "$data" ]; then
                    response=$(curl -s -w "%{http_code}" -o /tmp/api_response \
                      -X POST \
                      -H "Authorization: Bearer ${ADMIN_TOKEN}" \
                      -H "Content-Type: application/json" \
                      -d "$data" \
                      "$url")
                  else
                    response=$(curl -s -w "%{http_code}" -o /tmp/api_response \
                      -H "Authorization: Bearer ${ADMIN_TOKEN}" \
                      "$url")
                  fi
                  
                  if [ "$response" = "200" ] || [ "$response" = "201" ]; then
                    return 0
                  fi
                  
                  retry_count=$((retry_count + 1))
                  echo "API call failed with status $response, retry $retry_count/$max_retries"
                  if [ $retry_count -lt $max_retries ]; then
                    sleep 5
                  fi
                done
                
                echo "API call failed after $max_retries retries"
                cat /tmp/api_response
                return 1
              }

              # Get admin token
              ADMIN_TOKEN="${AUTHENTIK_TOKEN}"

              # Test authentication first with retry
              echo "Testing authentication..."
              if ! retry_api_call "${AUTHENTIK_HOST}/api/v3/core/users/me/"; then
                echo "ERROR: API token authentication failed after retries."
                echo "The token may not have sufficient permissions."
                echo "Please ensure the admin-token-setup job has run successfully."
                exit 1
              fi
              echo "Authentication successful"

              # Use the same authorization flow as RADIUS provider
              AUTH_FLOW_UUID="be0ee023-11fe-4a43-b453-bc67957cafbf"
              echo "Using authorization flow: $AUTH_FLOW_UUID"

              # Check if Longhorn proxy provider already exists
              echo "Checking for existing Longhorn proxy provider..."
              if ! retry_api_call "${AUTHENTIK_HOST}/api/v3/providers/proxy/"; then
                echo "Failed to check existing proxy providers"
                exit 1
              fi

              PROVIDER_RESPONSE=$(cat /tmp/api_response)
              echo "Provider response: $PROVIDER_RESPONSE"

              PROVIDER_EXISTS=$(echo "$PROVIDER_RESPONSE" | grep -o '"name":"longhorn-proxy"' || echo "")

              if [ -z "$PROVIDER_EXISTS" ]; then
                echo "Creating Longhorn proxy provider..."
                PROVIDER_DATA="{
                  \"name\": \"longhorn-proxy\",
                  \"authorization_flow\": \"${AUTH_FLOW_UUID}\",
                  \"external_host\": \"https://longhorn.k8s.home.geoffdavis.com\",
                  \"internal_host\": \"http://longhorn-frontend.longhorn-system.svc.cluster.local\",
                  \"internal_host_ssl_validation\": false,
                  \"mode\": \"forward_single\",
                  \"cookie_domain\": \"k8s.home.geoffdavis.com\",
                  \"skip_path_regex\": \"^/api/.*$\",
                  \"basic_auth_enabled\": false,
                  \"basic_auth_password_attribute\": \"\",
                  \"basic_auth_user_attribute\": \"\"
                }"
                
                if retry_api_call "${AUTHENTIK_HOST}/api/v3/providers/proxy/" "POST" "$PROVIDER_DATA"; then
                  PROVIDER_PK=$(cat /tmp/api_response | grep -o '"pk":[0-9]*' | cut -d':' -f2)
                  echo "Created Longhorn proxy provider with PK: $PROVIDER_PK"
                else
                  echo "Failed to create Longhorn proxy provider after retries"
                  exit 1
                fi
              else
                echo "Longhorn proxy provider already exists"
                PROVIDER_PK=$(echo "$PROVIDER_RESPONSE" | grep -A10 '"name":"longhorn-proxy"' | grep -o '"pk":[0-9]*' | cut -d':' -f2)
                echo "Found existing provider with PK: $PROVIDER_PK"
              fi

              # Check if Longhorn Application already exists
              echo "Checking for existing Longhorn application..."
              if ! retry_api_call "${AUTHENTIK_HOST}/api/v3/core/applications/"; then
                echo "Failed to check existing applications"
                exit 1
              fi

              APP_RESPONSE=$(cat /tmp/api_response)
              echo "Application response: $APP_RESPONSE"

              APP_EXISTS=$(echo "$APP_RESPONSE" | grep -o '"name":"Longhorn Storage"' || echo "")

              if [ -z "$APP_EXISTS" ]; then
                echo "Creating Longhorn application..."
                APP_DATA="{
                  \"name\": \"Longhorn Storage\",
                  \"slug\": \"longhorn\",
                  \"provider\": ${PROVIDER_PK},
                  \"meta_description\": \"Longhorn distributed block storage management interface\",
                  \"meta_publisher\": \"Longhorn\",
                  \"meta_launch_url\": \"https://longhorn.k8s.home.geoffdavis.com\",
                  \"policy_engine_mode\": \"any\",
                  \"group\": \"\"
                }"
                
                if retry_api_call "${AUTHENTIK_HOST}/api/v3/core/applications/" "POST" "$APP_DATA"; then
                  echo "Longhorn application created successfully!"
                  cat /tmp/api_response
                else
                  echo "Failed to create Longhorn application after retries"
                  exit 1
                fi
              else
                echo "Longhorn application already exists"
              fi

              # Check if proxy outpost already exists
              echo "Checking for existing proxy outpost..."
              if ! retry_api_call "${AUTHENTIK_HOST}/api/v3/outposts/instances/"; then
                echo "Failed to check existing outposts"
                exit 1
              fi

              OUTPOST_RESPONSE=$(cat /tmp/api_response)
              echo "Outpost response: $OUTPOST_RESPONSE"

              OUTPOST_EXISTS=$(echo "$OUTPOST_RESPONSE" | grep -o '"name":"proxy-outpost"' || echo "")

              if [ -z "$OUTPOST_EXISTS" ]; then
                echo "Creating proxy outpost..."
                OUTPOST_DATA="{
                  \"name\": \"proxy-outpost\",
                  \"type\": \"proxy\",
                  \"providers\": [${PROVIDER_PK}],
                  \"config\": {
                    \"authentik_host\": \"http://authentik-server.authentik.svc.cluster.local\",
                    \"authentik_host_insecure\": true,
                    \"log_level\": \"info\",
                    \"object_naming\": \"goauthentik.io/outpost/%(name)s\",
                    \"docker_network\": null,
                    \"docker_map_ports\": true,
                    \"container_image\": null,
                    \"kubernetes_replicas\": 1,
                    \"kubernetes_namespace\": \"authentik\",
                    \"kubernetes_ingress_annotations\": {},
                    \"kubernetes_ingress_secret_name\": \"authentik-outpost-tls\",
                    \"kubernetes_service_type\": \"ClusterIP\",
                    \"kubernetes_disabled_components\": [],
                    \"kubernetes_image_pull_secrets\": []
                  }
                }"
                
                if retry_api_call "${AUTHENTIK_HOST}/api/v3/outposts/instances/" "POST" "$OUTPOST_DATA"; then
                  echo "Proxy outpost created successfully!"
                  cat /tmp/api_response
                else
                  echo "Failed to create proxy outpost after retries"
                  exit 1
                fi
              else
                echo "Proxy outpost already exists"
              fi

              echo "Longhorn proxy configuration completed!"
