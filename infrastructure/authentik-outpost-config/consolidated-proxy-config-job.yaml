apiVersion: batch/v1
kind: Job
metadata:
  name: authentik-proxy-config
  namespace: authentik
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
      - name: proxy-config
        image: curlimages/curl:latest
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          seccompProfile:
            type: RuntimeDefault
        env:
        - name: AUTHENTIK_TOKEN
          value: "ak_pwicEfx-ehOQuz6BWATQ3fley2Bk9JwCDxPjgS1Q8c3lSFPvtL8d4Q"
        - name: AUTHENTIK_URL
          value: "http://authentik-server.authentik.svc.cluster.local"
        command:
        - /bin/sh
        - -c
        - |
          set -e
          echo "=== AUTHENTIK PROXY PROVIDER CONFIGURATION ==="
          
          # Test API connectivity first
          echo "Testing API connectivity..."
          response=$(curl -s -w "%{http_code}" -H "Authorization: Bearer $AUTHENTIK_TOKEN" "$AUTHENTIK_URL/api/v3/core/users/me/")
          http_code="${response: -3}"
          if [ "$http_code" != "200" ]; then
            echo "ERROR: API test failed with HTTP $http_code"
            echo "Response: $response"
            exit 1
          fi
          echo "API connectivity test passed"
          
          # Get outpost ID
          echo "Getting outpost ID..."
          outpost_response=$(curl -s -H "Authorization: Bearer $AUTHENTIK_TOKEN" "$AUTHENTIK_URL/api/v3/outposts/instances/")
          outpost_id=$(echo "$outpost_response" | grep -o '"pk":"[^"]*"' | head -1 | cut -d'"' -f4)
          
          if [ -z "$outpost_id" ]; then
            echo "ERROR: Could not find outpost ID"
            echo "Outpost response: $outpost_response"
            exit 1
          fi
          echo "Found outpost ID: $outpost_id"
          
          # Get authorization flow UUID
          echo "Getting authorization flow UUID..."
          flow_response=$(curl -s -H "Authorization: Bearer $AUTHENTIK_TOKEN" "$AUTHENTIK_URL/api/v3/flows/instances/?slug=default-provider-authorization-implicit-consent")
          flow_uuid=$(echo "$flow_response" | grep -o '"pk":"[^"]*"' | head -1 | cut -d'"' -f4)
          
          if [ -z "$flow_uuid" ]; then
            echo "ERROR: Could not find authorization flow UUID"
            echo "Flow response: $flow_response"
            exit 1
          fi
          echo "Found authorization flow UUID: $flow_uuid"
          
          # Function to create proxy provider
          create_provider() {
            local name="$1"
            local external_host="$2"
            local internal_host="$3"
            
            echo "Creating proxy provider: $name"
            
            # Check if provider already exists
            existing=$(curl -s -H "Authorization: Bearer $AUTHENTIK_TOKEN" "$AUTHENTIK_URL/api/v3/providers/proxy/" | grep -o "\"name\":\"$name\"" || true)
            if [ -n "$existing" ]; then
              echo "Provider $name already exists, skipping..."
              return 0
            fi
            
            # Create the provider
            provider_data="{
              \"name\": \"$name\",
              \"authorization_flow\": \"$flow_uuid\",
              \"external_host\": \"https://$external_host\",
              \"internal_host\": \"$internal_host\",
              \"mode\": \"forward_single\"
            }"
            
            provider_response=$(curl -s -X POST \
              -H "Authorization: Bearer $AUTHENTIK_TOKEN" \
              -H "Content-Type: application/json" \
              -d "$provider_data" \
              "$AUTHENTIK_URL/api/v3/providers/proxy/")
            
            provider_id=$(echo "$provider_response" | grep -o '"pk":[0-9]*' | head -1 | cut -d':' -f2)
            
            if [ -z "$provider_id" ]; then
              echo "ERROR: Failed to create provider $name"
              echo "Response: $provider_response"
              return 1
            fi
            
            echo "Created provider $name with ID: $provider_id"
            
            # Create application
            app_slug="$(echo $name | tr '[:upper:]' '[:lower:]' | tr ' ' '-')"
            
            # Check if application already exists
            existing_app=$(curl -s -H "Authorization: Bearer $AUTHENTIK_TOKEN" "$AUTHENTIK_URL/api/v3/core/applications/?slug=$app_slug" | grep -o '"pk":"[^"]*"' | head -1 | cut -d'"' -f4 || true)
            
            if [ -n "$existing_app" ]; then
              echo "Application $name already exists with ID: $existing_app, updating provider..."
              app_id="$existing_app"
              
              # Update existing application with new provider
              app_update_data="{
                \"provider\": $provider_id
              }"
              
              app_response=$(curl -s -X PATCH \
                -H "Authorization: Bearer $AUTHENTIK_TOKEN" \
                -H "Content-Type: application/json" \
                -d "$app_update_data" \
                "$AUTHENTIK_URL/api/v3/core/applications/$app_id/")
              
              echo "Updated existing application $name"
            else
              # Create new application
              app_data="{
                \"name\": \"$name\",
                \"slug\": \"$app_slug\",
                \"provider\": $provider_id
              }"
              
              app_response=$(curl -s -X POST \
                -H "Authorization: Bearer $AUTHENTIK_TOKEN" \
                -H "Content-Type: application/json" \
                -d "$app_data" \
                "$AUTHENTIK_URL/api/v3/core/applications/")
              
              app_id=$(echo "$app_response" | grep -o '"pk":"[^"]*"' | head -1 | cut -d'"' -f4)
              
              if [ -z "$app_id" ]; then
                echo "ERROR: Failed to create application for $name"
                echo "Response: $app_response"
                return 1
              fi
              
              echo "Created application $name with ID: $app_id"
            fi
            
            # Get current outpost providers
            echo "Getting current outpost providers..."
            current_outpost=$(curl -s -H "Authorization: Bearer $AUTHENTIK_TOKEN" "$AUTHENTIK_URL/api/v3/outposts/instances/$outpost_id/")
            current_providers=$(echo "$current_outpost" | grep -o '"providers":\[[^]]*\]' | sed 's/"providers":\[//' | sed 's/\]//' | tr -d ' ')
            
            # Add new provider to existing list
            if [ -z "$current_providers" ]; then
              new_providers="$provider_id"
            else
              new_providers="$current_providers,$provider_id"
            fi
            
            echo "Adding provider $provider_id to outpost $outpost_id..."
            outpost_update_data="{
              \"providers\": [$new_providers]
            }"
            
            outpost_update_response=$(curl -s -X PATCH \
              -H "Authorization: Bearer $AUTHENTIK_TOKEN" \
              -H "Content-Type: application/json" \
              -d "$outpost_update_data" \
              "$AUTHENTIK_URL/api/v3/outposts/instances/$outpost_id/")
            
            echo "Updated outpost with provider $name"
          }
          
          # Create all proxy providers
          create_provider "Longhorn" "longhorn.k8s.home.geoffdavis.com" "http://longhorn-frontend.longhorn-system.svc.cluster.local"
          create_provider "Kubernetes Dashboard" "dashboard.k8s.home.geoffdavis.com" "http://kubernetes-dashboard-web.kubernetes-dashboard.svc.cluster.local:8000"
          create_provider "Hubble UI" "hubble.k8s.home.geoffdavis.com" "http://hubble-ui.kube-system.svc.cluster.local"
          create_provider "Grafana" "grafana.k8s.home.geoffdavis.com" "http://kube-prometheus-stack-grafana.monitoring.svc.cluster.local"
          create_provider "Prometheus" "prometheus.k8s.home.geoffdavis.com" "http://kube-prometheus-stack-prometheus.monitoring.svc.cluster.local:9090"
          create_provider "Alertmanager" "alertmanager.k8s.home.geoffdavis.com" "http://kube-prometheus-stack-alertmanager.monitoring.svc.cluster.local:9093"
          
          echo "=== PROXY CONFIGURATION COMPLETED ==="