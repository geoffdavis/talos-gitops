---
apiVersion: batch/v1
kind: Job
metadata:
  name: authentik-radius-outpost-config
  namespace: authentik
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-weight: "10"
spec:
  backoffLimit: 3
  activeDeadlineSeconds: 600
  template:
    metadata:
      labels:
        app.kubernetes.io/name: authentik-radius-config
        app.kubernetes.io/component: configuration
    spec:
      restartPolicy: OnFailure
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      initContainers:
        - name: wait-for-authentik
          image: curlimages/curl:8.5.0
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/sh
            - -c
            - |
              echo "Waiting for Authentik server to be ready..."
              until curl -f -s http://authentik-server.authentik.svc.cluster.local/if/flow/initial-setup/ > /dev/null 2>&1; do
                echo "Authentik not ready yet, waiting 10 seconds..."
                sleep 10
              done
              echo "Authentik server is ready!"
      containers:
        - name: configure-outpost
          image: curlimages/curl:8.5.0
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: AUTHENTIK_HOST
              value: "http://authentik-server.authentik.svc.cluster.local"
            - name: AUTHENTIK_TOKEN
              valueFrom:
                secretKeyRef:
                  name: authentik-radius-token
                  key: token
          command:
            - /bin/sh
            - -c
            - |
              set -e
              echo "Configuring RADIUS outpost..."

              # Function to retry API calls
              retry_api_call() {
                local url="$1"
                local method="${2:-GET}"
                local data="${3:-}"
                local max_retries=3
                local retry_count=0
                
                while [ $retry_count -lt $max_retries ]; do
                  if [ "$method" = "POST" ] && [ -n "$data" ]; then
                    response=$(curl -s -w "%{http_code}" -o /tmp/api_response \
                      -X POST \
                      -H "Authorization: Bearer ${ADMIN_TOKEN}" \
                      -H "Content-Type: application/json" \
                      -d "$data" \
                      "$url")
                  else
                    response=$(curl -s -w "%{http_code}" -o /tmp/api_response \
                      -H "Authorization: Bearer ${ADMIN_TOKEN}" \
                      "$url")
                  fi
                  
                  if [ "$response" = "200" ] || [ "$response" = "201" ]; then
                    return 0
                  fi
                  
                  retry_count=$((retry_count + 1))
                  echo "API call failed with status $response, retry $retry_count/$max_retries"
                  if [ $retry_count -lt $max_retries ]; then
                    sleep 5
                  fi
                done
                
                echo "API call failed after $max_retries retries"
                cat /tmp/api_response
                return 1
              }

              # Get admin token (using API token created via management command)
              ADMIN_TOKEN="${AUTHENTIK_TOKEN}"

              # Test authentication first with retry
              echo "Testing authentication..."
              if ! retry_api_call "${AUTHENTIK_HOST}/api/v3/core/users/me/"; then
                echo "ERROR: API token authentication failed after retries."
                echo "The token may not have sufficient permissions."
                echo "Please ensure the admin-token-setup job has run successfully."
                exit 1
              fi
              echo "Authentication successful"

              # Check if RADIUS provider already exists
              echo "Checking for existing RADIUS provider..."
              if ! retry_api_call "${AUTHENTIK_HOST}/api/v3/providers/radius/"; then
                echo "Failed to check existing RADIUS providers"
                exit 1
              fi

              PROVIDER_RESPONSE=$(cat /tmp/api_response)
              echo "Provider response: $PROVIDER_RESPONSE"

              PROVIDER_EXISTS=$(echo "$PROVIDER_RESPONSE" | grep -o '"name":"radius-provider"' || echo "")

              if [ -z "$PROVIDER_EXISTS" ]; then
                echo "Creating RADIUS provider..."
                PROVIDER_DATA='{
                  "name": "radius-provider",
                  "authorization_flow": "be0ee023-11fe-4a43-b453-bc67957cafbf",
                  "shared_secret": "radius-shared-secret-change-me",
                  "client_networks": "0.0.0.0/0,::/0"
                }'
                
                if retry_api_call "${AUTHENTIK_HOST}/api/v3/providers/radius/" "POST" "$PROVIDER_DATA"; then
                  PROVIDER_PK=$(cat /tmp/api_response | grep -o '"pk":[0-9]*' | cut -d':' -f2)
                  echo "Created RADIUS provider with PK: $PROVIDER_PK"
                else
                  echo "Failed to create RADIUS provider after retries"
                  exit 1
                fi
              else
                echo "RADIUS provider already exists"
                PROVIDER_PK=$(echo "$PROVIDER_RESPONSE" | grep -A5 '"name":"radius-provider"' | grep -o '"pk":[0-9]*' | cut -d':' -f2)
                echo "Found existing provider with PK: $PROVIDER_PK"
              fi

              # Check if RADIUS Application already exists
              echo "Checking for existing RADIUS application..."
              if ! retry_api_call "${AUTHENTIK_HOST}/api/v3/core/applications/"; then
                echo "Failed to check existing applications"
                exit 1
              fi

              APP_RESPONSE=$(cat /tmp/api_response)
              echo "Application response: $APP_RESPONSE"

              APP_EXISTS=$(echo "$APP_RESPONSE" | grep -o '"name":"RADIUS Application"' || echo "")

              if [ -z "$APP_EXISTS" ]; then
                echo "Creating RADIUS application..."
                APP_DATA="{
                  \"name\": \"RADIUS Application\",
                  \"slug\": \"radius-app\",
                  \"provider\": ${PROVIDER_PK},
                  \"meta_description\": \"RADIUS authentication application\",
                  \"meta_publisher\": \"Authentik\"
                }"
                
                if retry_api_call "${AUTHENTIK_HOST}/api/v3/core/applications/" "POST" "$APP_DATA"; then
                  echo "RADIUS application created successfully!"
                  cat /tmp/api_response
                else
                  echo "Failed to create RADIUS application after retries"
                  exit 1
                fi
              else
                echo "RADIUS application already exists"
              fi

              # Check if RADIUS outpost already exists
              echo "Checking for existing RADIUS outpost..."
              if ! retry_api_call "${AUTHENTIK_HOST}/api/v3/outposts/instances/"; then
                echo "Failed to check existing outposts"
                exit 1
              fi

              OUTPOST_RESPONSE=$(cat /tmp/api_response)
              echo "Outpost response: $OUTPOST_RESPONSE"

              OUTPOST_EXISTS=$(echo "$OUTPOST_RESPONSE" | grep -o '"name":"radius-outpost"' || echo "")

              if [ -z "$OUTPOST_EXISTS" ]; then
                echo "Creating RADIUS outpost..."
                OUTPOST_DATA="{
                  \"name\": \"radius-outpost\",
                  \"type\": \"radius\",
                  \"providers\": [${PROVIDER_PK}],
                  \"config\": {
                    \"authentik_host\": \"${AUTHENTIK_HOST}\",
                    \"authentik_host_insecure\": true,
                    \"log_level\": \"info\",
                    \"object_naming\": \"goauthentik.io/outpost/%(name)s\",
                    \"docker_network\": null,
                    \"docker_map_ports\": true,
                    \"container_image\": null,
                    \"kubernetes_replicas\": 2,
                    \"kubernetes_namespace\": \"authentik\",
                    \"kubernetes_ingress_annotations\": {},
                    \"kubernetes_ingress_secret_name\": \"authentik-outpost-tls\",
                    \"kubernetes_service_type\": \"LoadBalancer\",
                    \"kubernetes_disabled_components\": [],
                    \"kubernetes_image_pull_secrets\": []
                  }
                }"
                
                if retry_api_call "${AUTHENTIK_HOST}/api/v3/outposts/instances/" "POST" "$OUTPOST_DATA"; then
                  echo "RADIUS outpost created successfully!"
                  cat /tmp/api_response
                else
                  echo "Failed to create RADIUS outpost after retries"
                  exit 1
                fi
              else
                echo "RADIUS outpost already exists"
              fi

              echo "RADIUS outpost configuration completed!"
