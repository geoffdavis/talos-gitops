---
apiVersion: batch/v1
kind: Job
metadata:
  name: homeassistant-user-creation
  namespace: postgresql-system
  labels:
    app.kubernetes.io/name: postgresql-cluster
    app.kubernetes.io/component: database
    application: homeassistant
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgresql-cluster
        app.kubernetes.io/component: database
        application: homeassistant
    spec:
      restartPolicy: OnFailure
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: create-user
          image: postgres:16.4-alpine
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: PGHOST
              value: "postgresql-cluster-rw.postgresql-system.svc.cluster.local"
            - name: PGPORT
              value: "5432"
            - name: PGDATABASE
              value: "postgres"
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: postgresql-superuser-credentials
                  key: username
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgresql-superuser-credentials
                  key: password
            - name: APP_DB_USER
              valueFrom:
                secretKeyRef:
                  name: homeassistant-database-credentials
                  key: username
            - name: APP_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: homeassistant-database-credentials
                  key: password
            - name: PGSSLMODE
              value: "require"
          command:
            - /bin/sh
            - -c
            - |
              set -e
              echo "Creating homeassistant user and database..."
              
              # Check if user exists
              USER_EXISTS=$(psql -tAc "SELECT 1 FROM pg_roles WHERE rolname='${APP_DB_USER}';")
              
              if [ "$USER_EXISTS" != "1" ]; then
                echo "Creating user ${APP_DB_USER}..."
                psql -c "CREATE USER ${APP_DB_USER} WITH PASSWORD '${APP_DB_PASSWORD}';"
                echo "User created successfully"
              else
                echo "User ${APP_DB_USER} already exists"
                echo "Updating password..."
                psql -c "ALTER USER ${APP_DB_USER} WITH PASSWORD '${APP_DB_PASSWORD}';"
              fi
              
              # Check if database exists
              DB_EXISTS=$(psql -tAc "SELECT 1 FROM pg_database WHERE datname='homeassistant';")
              
              if [ "$DB_EXISTS" != "1" ]; then
                echo "Creating homeassistant database..."
                psql -c "CREATE DATABASE homeassistant OWNER ${APP_DB_USER};"
                echo "Database created successfully"
              else
                echo "Database homeassistant already exists"
                echo "Updating owner..."
                psql -c "ALTER DATABASE homeassistant OWNER TO ${APP_DB_USER};"
              fi
              
              # Grant permissions
              echo "Granting permissions..."
              psql -c "GRANT ALL PRIVILEGES ON DATABASE homeassistant TO ${APP_DB_USER};"
              
              # Connect to homeassistant database and grant schema permissions
              echo "Granting schema permissions..."
              PGDATABASE=homeassistant psql -c "GRANT ALL ON SCHEMA public TO ${APP_DB_USER};"
              PGDATABASE=homeassistant psql -c "GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO ${APP_DB_USER};"
              PGDATABASE=homeassistant psql -c "GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO ${APP_DB_USER};"
              PGDATABASE=homeassistant psql -c "ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO ${APP_DB_USER};"
              PGDATABASE=homeassistant psql -c "ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO ${APP_DB_USER};"
              
              echo "User and database setup completed successfully"
          volumeMounts:
            - name: tmp
              mountPath: /tmp
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "128Mi"
              cpu: "100m"
      volumes:
        - name: tmp
          emptyDir:
            sizeLimit: 100Mi