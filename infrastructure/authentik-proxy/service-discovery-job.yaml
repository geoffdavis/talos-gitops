apiVersion: batch/v1
kind: CronJob
metadata:
  name: authentik-service-discovery
  namespace: authentik-proxy
  labels:
    app.kubernetes.io/name: authentik-proxy
    app.kubernetes.io/component: service-discovery
spec:
  schedule: "*/15 * * * *" # Run every 15 minutes
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      backoffLimit: 2
      activeDeadlineSeconds: 300
      template:
        metadata:
          labels:
            app.kubernetes.io/name: authentik-proxy
            app.kubernetes.io/component: service-discovery
        spec:
          restartPolicy: OnFailure
          serviceAccountName: authentik-proxy
          securityContext:
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
            seccompProfile:
              type: RuntimeDefault
          containers:
            - name: discover-services
              image: registry.k8s.io/kubectl:v1.31.1
              securityContext:
                allowPrivilegeEscalation: false
                runAsNonRoot: true
                runAsUser: 65534
                runAsGroup: 65534
                capabilities:
                  drop:
                    - ALL
                seccompProfile:
                  type: RuntimeDefault
                readOnlyRootFilesystem: true
              env:
                - name: AUTHENTIK_HOST
                  value: "http://authentik-server.authentik.svc.cluster.local:80"
                - name: AUTHENTIK_TOKEN
                  valueFrom:
                    secretKeyRef:
                      name: authentik-admin-token
                      key: token
                - name: EXTERNAL_OUTPOST_ID
                  valueFrom:
                    configMapKeyRef:
                      name: authentik-service-discovery-config
                      key: external_outpost_id
              volumeMounts:
                - name: tmp-volume
                  mountPath: /tmp
              command:
                - /bin/bash
                - -c
                - |
                  set -e
                  echo "=== Creating Authentik Proxy Providers for External Outpost ==="

                  # Get default configuration from ConfigMap
                  AUTHORIZATION_FLOW="be0ee023-11fe-4a43-b453-bc67957cafbf"
                  INVALIDATION_FLOW="be0ee023-11fe-4a43-b453-bc67957cafbf"
                  COOKIE_DOMAIN="k8s.home.geoffdavis.com"

                  # Function to create proxy provider
                  create_proxy_provider() {
                    local name="$1"
                    local external_host="$2"
                    local internal_host="$3"
                    local slug="$4"

                    echo "Creating proxy provider: $name"

                    # Create proxy provider
                    curl -s -X POST "${AUTHENTIK_HOST}/api/v3/providers/proxy/" \
                      -H "Authorization: Bearer ${AUTHENTIK_TOKEN}" \
                      -H "Content-Type: application/json" \
                      -d "{
                        \"name\": \"${name}\",
                        \"external_host\": \"https://${external_host}\",
                        \"internal_host\": \"${internal_host}\",
                        \"authorization_flow\": \"${AUTHORIZATION_FLOW}\",
                        \"invalidation_flow\": \"${INVALIDATION_FLOW}\",
                        \"cookie_domain\": \"${COOKIE_DOMAIN}\",
                        \"mode\": \"forward_single\",
                        \"skip_path_regex\": \"^/api/.*$\",
                        \"basic_auth_enabled\": false,
                        \"internal_host_ssl_validation\": false
                      }" > /tmp/provider_${slug}.json

                    PROVIDER_ID=$(cat /tmp/provider_${slug}.json | grep -o '\"pk\":[0-9]*' | cut -d':' -f2)
                    echo "Created provider ID: $PROVIDER_ID"

                    # Assign provider to external outpost
                    if [ -n "$PROVIDER_ID" ] && [ "$PROVIDER_ID" != "" ]; then
                      echo "Assigning provider $PROVIDER_ID to outpost $EXTERNAL_OUTPOST_ID"
                      curl -s -X PATCH "${AUTHENTIK_HOST}/api/v3/outposts/instances/${EXTERNAL_OUTPOST_ID}/" \
                        -H "Authorization: Bearer ${AUTHENTIK_TOKEN}" \
                        -H "Content-Type: application/json" \
                        -d "{
                          \"providers\": [${PROVIDER_ID}]
                        }"
                      echo "Provider assigned to outpost"
                    fi
                  }

                  # Create proxy providers for all services
                  create_proxy_provider "Longhorn Storage" "longhorn.k8s.home.geoffdavis.com" \
                    "http://longhorn-frontend.longhorn-system.svc.cluster.local:80" "longhorn"
                  create_proxy_provider "Grafana Dashboard" "grafana.k8s.home.geoffdavis.com" \
                    "http://kube-prometheus-stack-grafana.monitoring.svc.cluster.local:80" "grafana"
                  create_proxy_provider "Prometheus Metrics" "prometheus.k8s.home.geoffdavis.com" \
                    "http://kube-prometheus-stack-prometheus.monitoring.svc.cluster.local:9090" "prometheus"
                  create_proxy_provider "AlertManager" "alertmanager.k8s.home.geoffdavis.com" \
                    "http://kube-prometheus-stack-alertmanager.monitoring.svc.cluster.local:9093" "alertmanager"
                  create_proxy_provider "Kubernetes Dashboard" "dashboard.k8s.home.geoffdavis.com" \
                    "http://kubernetes-dashboard-kong-proxy.kubernetes-dashboard.svc.cluster.local:8000" "dashboard"
                  create_proxy_provider "Hubble UI" "hubble.k8s.home.geoffdavis.com" \
                    "http://hubble-ui.kube-system.svc.cluster.local:80" "hubble"
                  create_proxy_provider "Home Assistant" "homeassistant.k8s.home.geoffdavis.com" \
                    "http://home-assistant.home-automation.svc.cluster.local:8123" "homeassistant"

                  echo "=== Proxy Provider Creation Complete ==="
          volumes:
            - name: tmp-volume
              emptyDir: {}
