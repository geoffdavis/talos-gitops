apiVersion: batch/v1
kind: CronJob
metadata:
  name: authentik-service-discovery
  namespace: authentik-proxy
  labels:
    app.kubernetes.io/name: authentik-proxy
    app.kubernetes.io/component: service-discovery
spec:
  schedule: "*/15 * * * *" # Run every 15 minutes
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      backoffLimit: 2
      activeDeadlineSeconds: 300
      template:
        metadata:
          labels:
            app.kubernetes.io/name: authentik-proxy
            app.kubernetes.io/component: service-discovery
        spec:
          restartPolicy: OnFailure
          serviceAccountName: authentik-proxy
          securityContext:
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
            seccompProfile:
              type: RuntimeDefault
          containers:
            - name: discover-services
              image: curlimages/curl:8.5.0
              securityContext:
                allowPrivilegeEscalation: false
                runAsNonRoot: true
                runAsUser: 65534
                runAsGroup: 65534
                capabilities:
                  drop:
                    - ALL
                seccompProfile:
                  type: RuntimeDefault
                readOnlyRootFilesystem: true
              env:
                - name: AUTHENTIK_HOST
                  value: "http://authentik-server.authentik.svc.cluster.local:80"
                - name: AUTHENTIK_TOKEN
                  valueFrom:
                    secretKeyRef:
                      name: authentik-admin-token
                      key: token
                - name: EXTERNAL_OUTPOST_ID
                  valueFrom:
                    configMapKeyRef:
                      name: authentik-service-discovery-config
                      key: external_outpost_id
              volumeMounts:
                - name: tmp-volume
                  mountPath: /tmp
              command:
                - /bin/sh
                - -c
                - |
                  set -e
                  echo "=== Creating Authentik Proxy Providers for External Outpost ==="

                  # Debug environment variables
                  echo "AUTHENTIK_HOST: ${AUTHENTIK_HOST}"
                  echo "EXTERNAL_OUTPOST_ID: ${EXTERNAL_OUTPOST_ID}"
                  echo "AUTHENTIK_TOKEN: [REDACTED - length: $(echo -n "${AUTHENTIK_TOKEN}" | wc -c)]"

                  # Validate required environment variables
                  if [ -z "${AUTHENTIK_HOST}" ] || [ -z "${AUTHENTIK_TOKEN}" ] || [ -z "${EXTERNAL_OUTPOST_ID}" ]; then
                    echo "ERROR: Missing required environment variables"
                    echo "AUTHENTIK_HOST: ${AUTHENTIK_HOST:-MISSING}"
                    echo "EXTERNAL_OUTPOST_ID: ${EXTERNAL_OUTPOST_ID:-MISSING}"
                    echo "AUTHENTIK_TOKEN: $([ -n "${AUTHENTIK_TOKEN}" ] && echo "SET" || echo "MISSING")"
                    exit 1
                  fi

                  # Test Authentik API connectivity
                  echo "Testing Authentik API connectivity..."
                  if ! curl -s -f "${AUTHENTIK_HOST}/api/v3/core/users/me/" \
                    -H "Authorization: Bearer ${AUTHENTIK_TOKEN}" > /tmp/api_test.json; then
                    echo "ERROR: Failed to connect to Authentik API"
                    echo "Response:"
                    cat /tmp/api_test.json 2>/dev/null || echo "No response received"
                    exit 1
                  fi
                  echo "API connectivity test successful"

                  # Get default configuration from ConfigMap
                  AUTHORIZATION_FLOW="be0ee023-11fe-4a43-b453-bc67957cafbf"
                  INVALIDATION_FLOW="be0ee023-11fe-4a43-b453-bc67957cafbf"
                  COOKIE_DOMAIN="k8s.home.geoffdavis.com"

                  # Function to create proxy provider
                  create_proxy_provider() {
                    local name="$1"
                    local external_host="$2"
                    local internal_host="$3"
                    local slug="$4"

                    echo "Creating proxy provider: $name"

                    # Create proxy provider
                    if curl -s -X POST "${AUTHENTIK_HOST}/api/v3/providers/proxy/" \
                      -H "Authorization: Bearer ${AUTHENTIK_TOKEN}" \
                      -H "Content-Type: application/json" \
                      -d "{
                        \"name\": \"${name}\",
                        \"external_host\": \"https://${external_host}\",
                        \"internal_host\": \"${internal_host}\",
                        \"authorization_flow\": \"${AUTHORIZATION_FLOW}\",
                        \"invalidation_flow\": \"${INVALIDATION_FLOW}\",
                        \"cookie_domain\": \"${COOKIE_DOMAIN}\",
                        \"mode\": \"forward_single\",
                        \"skip_path_regex\": \"^/api/.*$\",
                        \"basic_auth_enabled\": false,
                        \"internal_host_ssl_validation\": false
                      }" > /tmp/provider_${slug}.json; then

                      echo "Provider creation response:"
                      cat /tmp/provider_${slug}.json

                      PROVIDER_ID=$(cat /tmp/provider_${slug}.json | grep -o '\"pk\":[0-9]*' | cut -d':' -f2)
                      if [ -n "$PROVIDER_ID" ] && [ "$PROVIDER_ID" != "" ]; then
                        echo "Created provider ID: $PROVIDER_ID"

                        # Get current outpost providers
                        echo "Getting current outpost providers..."
                        curl -s "${AUTHENTIK_HOST}/api/v3/outposts/instances/${EXTERNAL_OUTPOST_ID}/" \
                          -H "Authorization: Bearer ${AUTHENTIK_TOKEN}" > /tmp/outpost_current.json

                        # Extract current provider IDs and add new one
                        CURRENT_PROVIDERS=$(cat /tmp/outpost_current.json | \
                          grep -o '\"providers\":\[[^]]*\]' | grep -o '[0-9]\+' | \
                          tr '\n' ',' | sed 's/,$//')
                        if [ -n "$CURRENT_PROVIDERS" ]; then
                          NEW_PROVIDERS="${CURRENT_PROVIDERS},${PROVIDER_ID}"
                        else
                          NEW_PROVIDERS="${PROVIDER_ID}"
                        fi

                        echo "Assigning provider $PROVIDER_ID to outpost $EXTERNAL_OUTPOST_ID"
                        echo "Current providers: $CURRENT_PROVIDERS"
                        if curl -s -X PATCH "${AUTHENTIK_HOST}/api/v3/outposts/instances/${EXTERNAL_OUTPOST_ID}/" \
                          -H "Authorization: Bearer ${AUTHENTIK_TOKEN}" \
                          -H "Content-Type: application/json" \
                          -d "{\"providers\": [${NEW_PROVIDERS}]}" > /tmp/outpost_update.json; then
                          echo "Provider assigned to outpost successfully"
                          cat /tmp/outpost_update.json
                        else
                          echo "ERROR: Failed to assign provider to outpost"
                          cat /tmp/outpost_update.json
                        fi
                      else
                        echo "ERROR: Failed to extract provider ID from response"
                      fi
                    else
                      echo "ERROR: Failed to create proxy provider for $name"
                      cat /tmp/provider_${slug}.json
                    fi
                    echo "---"
                  }

                  # Create proxy providers for all services
                  create_proxy_provider "Longhorn Storage" "longhorn.k8s.home.geoffdavis.com" \
                    "http://longhorn-frontend.longhorn-system.svc.cluster.local:80" "longhorn"
                  create_proxy_provider "AlertManager" "alertmanager.k8s.home.geoffdavis.com" \
                    "http://kube-prometheus-stack-alertmanager.monitoring.svc.cluster.local:9093" "alertmanager"
                  create_proxy_provider "Hubble UI" "hubble.k8s.home.geoffdavis.com" \
                    "http://hubble-ui.kube-system.svc.cluster.local:80" "hubble"
                  create_proxy_provider "Home Assistant" "homeassistant.k8s.home.geoffdavis.com" \
                    "http://home-assistant.home-automation.svc.cluster.local:8123" "homeassistant"

                  echo "=== Proxy Provider Creation Complete ==="
          volumes:
            - name: tmp-volume
              emptyDir: {}
