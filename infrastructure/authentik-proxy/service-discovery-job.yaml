apiVersion: batch/v1
kind: Job
metadata:
  name: authentik-service-discovery
  namespace: authentik-proxy
  labels:
    app.kubernetes.io/name: authentik-proxy
    app.kubernetes.io/component: service-discovery
spec:
  backoffLimit: 3
  activeDeadlineSeconds: 300
  template:
    metadata:
      labels:
        app.kubernetes.io/name: authentik-proxy
        app.kubernetes.io/component: service-discovery
    spec:
      restartPolicy: OnFailure
      serviceAccountName: authentik-proxy
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: discover-services
          image: registry.k8s.io/kubectl:v1.31.1
          securityContext:
            allowPrivilegeEscalation: true
            runAsNonRoot: false
            runAsUser: 0
            runAsGroup: 0
            capabilities:
              add:
                - NET_ADMIN
                - NET_RAW
                - SYS_ADMIN
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: AUTHENTIK_HOST
              value: "http://authentik-server.authentik.svc.cluster.local:80"
            - name: AUTHENTIK_TOKEN
              valueFrom:
                secretKeyRef:
                  name: authentik-admin-token
                  key: token
          command:
            - /bin/bash
            - -c
            - |
              set -e
              echo "=== Discovering Services with Authentik Proxy Labels ==="

              # Find all services with authentik proxy labels
              kubectl get services --all-namespaces \
                -l "authentik.io/proxy=enabled" \
                -o jsonpath='{range .items[*]}{.metadata.namespace}{"|"}{.metadata.name}{"|"}{.metadata.labels.authentik\.io/external-host}{"|"}{.metadata.labels.authentik\.io/service-name}{"|"}{.spec.ports[0].port}{"\n"}{end}' \
                > /tmp/discovered_services.txt

              echo "Discovered services:"
              cat /tmp/discovered_services.txt

              # Process each discovered service
              while IFS='|' read -r namespace service_name external_host display_name port; do
                if [ -n "$namespace" ] && [ -n "$service_name" ] && [ -n "$external_host" ]; then
                  echo "Processing: $display_name ($namespace/$service_name)"

                  # Create proxy provider configuration
                  internal_host="http://${service_name}.${namespace}.svc.cluster.local:${port}"

                  # Call Authentik API to create provider (simplified example)
                  echo "Would create proxy provider for $display_name"
                  echo "  External: $external_host"
                  echo "  Internal: $internal_host"
                fi
              done < /tmp/discovered_services.txt

              echo "=== Service Discovery Complete ==="
