apiVersion: batch/v1
kind: Job
metadata:
  name: test-authentik-proxy-authentication
  namespace: authentik-proxy
  labels:
    app.kubernetes.io/name: authentik-proxy
    app.kubernetes.io/component: authentication-test
spec:
  backoffLimit: 2
  activeDeadlineSeconds: 600
  template:
    metadata:
      labels:
        app.kubernetes.io/name: authentik-proxy
        app.kubernetes.io/component: authentication-test
    spec:
      restartPolicy: OnFailure
      serviceAccountName: authentik-proxy
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: test-authentication
          image: registry.k8s.io/kubectl:v1.33.3
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
            readOnlyRootFilesystem: true
          env:
            - name: AUTHENTIK_HOST
              value: "http://authentik-server.authentik.svc.cluster.local:80"
          volumeMounts:
            - name: tmp-volume
              mountPath: /tmp
          command:
            - /bin/bash
            - -c
            - |
              set -e
              echo "=== Testing External Authentik-Proxy Authentication Flow ==="

              # Function to test service endpoint
              test_service_endpoint() {
                local service_name="$1"
                local host="$2"
                local expected_backend="$3"

                echo "Testing $service_name..."
                echo "  Host: $host"
                echo "  Expected Backend: $expected_backend"

                # Test ingress resolution
                INGRESS_IP=$(kubectl get ingress -n authentik-proxy authentik-proxy \
                  -o jsonpath='{.status.loadBalancer.ingress[0].ip}' \
                  2>/dev/null || echo "")
                if [ -n "$INGRESS_IP" ]; then
                  echo "  Ingress IP: $INGRESS_IP"

                  # Test HTTP redirect to HTTPS
                  HTTP_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
                    -H "Host: $host" "http://$INGRESS_IP" || echo "000")
                  echo "  HTTP Response: $HTTP_RESPONSE"

                  # Test HTTPS connection (expect redirect to Authentik)
                  HTTPS_RESPONSE=$(curl -s -k -o /dev/null -w "%{http_code}" \
                    -H "Host: $host" "https://$INGRESS_IP" || echo "000")
                  echo "  HTTPS Response: $HTTPS_RESPONSE"

                  if [ "$HTTPS_RESPONSE" = "302" ] || [ "$HTTPS_RESPONSE" = "200" ]; then
                    echo "  ✅ $service_name endpoint is responding correctly"
                  else
                    echo "  ❌ $service_name endpoint may have issues (response: $HTTPS_RESPONSE)"
                  fi
                else
                  echo "  ❌ No ingress IP found for authentik-proxy"
                fi

                # Test backend service availability
                if echo "$expected_backend" | grep -q "^http://"; then
                  BACKEND_HOST=$(echo "$expected_backend" | sed 's|http://||' | cut -d'/' -f1)
                  BACKEND_PORT=$(echo "$BACKEND_HOST" | cut -d':' -f2)
                  BACKEND_SERVICE=$(echo "$BACKEND_HOST" | cut -d':' -f1)

                  echo "  Testing backend connectivity: $BACKEND_SERVICE"
                  if timeout 5 bash -c "</dev/tcp/${BACKEND_SERVICE}/${BACKEND_PORT:-80}" 2>/dev/null; then
                    echo "  ✅ Backend service $BACKEND_SERVICE is reachable"
                  else
                    echo "  ❌ Backend service $BACKEND_SERVICE is not reachable"
                  fi
                fi

                echo ""
              }

              # Test all configured services
              test_service_endpoint "Longhorn Storage" "longhorn.k8s.home.geoffdavis.com" \
                "http://longhorn-frontend.longhorn-system.svc.cluster.local:80"
              test_service_endpoint "Grafana Dashboard" "grafana.k8s.home.geoffdavis.com" \
                "http://kube-prometheus-stack-grafana.monitoring.svc.cluster.local:80"
              test_service_endpoint "Prometheus Metrics" "prometheus.k8s.home.geoffdavis.com" \
                "http://kube-prometheus-stack-prometheus.monitoring.svc.cluster.local:9090"
              test_service_endpoint "AlertManager" "alertmanager.k8s.home.geoffdavis.com" \
                "http://kube-prometheus-stack-alertmanager.monitoring.svc.cluster.local:9093"
              test_service_endpoint "Hubble UI" "hubble.k8s.home.geoffdavis.com" \
                "http://hubble-ui.kube-system.svc.cluster.local:80"
              test_service_endpoint "Home Assistant" "homeassistant.k8s.home.geoffdavis.com" \
                "http://home-assistant.home-automation.svc.cluster.local:8123"

              # Test authentik-proxy pod health
              echo "=== Testing Authentik-Proxy Pod Health ==="
              kubectl get pods -n authentik-proxy -l app.kubernetes.io/name=authentik-proxy

              # Test authentik-proxy service health
              echo ""
              echo "=== Testing Authentik-Proxy Service Health ==="
              for pod in $(kubectl get pods -n authentik-proxy \
                -l app.kubernetes.io/name=authentik-proxy \
                -o jsonpath='{.items[*].metadata.name}'); do
                echo "Testing pod: $pod"
                HEALTH_RESPONSE=$(kubectl exec -n authentik-proxy "$pod" -- \
                  curl -s -o /dev/null -w "%{http_code}" \
                  "http://localhost:9000/outpost.goauthentik.io/ping" || echo "000")
                echo "  Health check response: $HEALTH_RESPONSE"
                if [ "$HEALTH_RESPONSE" = "204" ]; then
                  echo "  ✅ Pod $pod is healthy"
                else
                  echo "  ❌ Pod $pod may have health issues"
                fi
              done

              # Test Redis connectivity
              echo ""
              echo "=== Testing Redis Connectivity ==="
              REDIS_POD=$(kubectl get pods -n authentik-proxy \
                -l app.kubernetes.io/name=redis \
                -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "")
              if [ -n "$REDIS_POD" ]; then
                echo "Redis pod: $REDIS_POD"
                REDIS_PING=$(kubectl exec -n authentik-proxy "$REDIS_POD" -- \
                  redis-cli ping 2>/dev/null || echo "FAILED")
                echo "Redis ping response: $REDIS_PING"
                if [ "$REDIS_PING" = "PONG" ]; then
                  echo "  ✅ Redis is responding correctly"
                else
                  echo "  ❌ Redis may have connectivity issues"
                fi
              else
                echo "  ❌ No Redis pod found"
              fi

              echo ""
              echo "=== Authentication Flow Test Complete ==="
              echo "Please manually test the authentication flow by visiting:"
              echo "  - https://longhorn.k8s.home.geoffdavis.com"
              echo "  - https://grafana.k8s.home.geoffdavis.com"
              echo "  - https://homeassistant.k8s.home.geoffdavis.com"
              echo ""
              echo "Dashboard is now internal-only (bypasses proxy):"
              echo "  - https://dashboard-internal.k8s.home.geoffdavis.com (token required)"
              echo ""
              echo "Expected behavior:"
              echo "  1. Redirect to Authentik login page"
              echo "  2. After successful login, redirect back to service"
              echo "  3. Service should load without manual token entry"
      volumes:
        - name: tmp-volume
          emptyDir: {}
