apiVersion: batch/v1
kind: Job
metadata:
  name: fix-oauth2-redirect-urls
  namespace: authentik-proxy
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-weight: "25"
  labels:
    app.kubernetes.io/name: authentik-proxy
    app.kubernetes.io/part-of: identity-provider
    app.kubernetes.io/component: oauth2-redirect-fix
spec:
  backoffLimit: 3
  activeDeadlineSeconds: 600
  template:
    metadata:
      labels:
        app.kubernetes.io/name: oauth2-redirect-fix
        app.kubernetes.io/component: configuration
    spec:
      restartPolicy: OnFailure
      serviceAccountName: authentik-proxy
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      initContainers:
        - name: wait-for-authentik
          image: curlimages/curl:8.5.0
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/sh
            - -c
            - |
              echo "Waiting for Authentik server to be ready..."
              max_attempts=30
              attempt=0
              while [ $attempt -lt $max_attempts ]; do
                if curl -f -s http://authentik-server.authentik.svc.cluster.local:80/if/flow/initial-setup/ > /dev/null 2>&1; then
                  echo "Authentik server is ready!"
                  exit 0
                fi
                attempt=$((attempt + 1))
                echo "Authentik not ready yet, attempt $attempt/$max_attempts, waiting 10 seconds..."
                sleep 10
              done
              echo "ERROR: Authentik server did not become ready within $((max_attempts * 10)) seconds"
              exit 1
      containers:
        - name: fix-oauth2-redirects
          image: python:3.12-slim
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: AUTHENTIK_HOST
              valueFrom:
                secretKeyRef:
                  name: authentik-proxy-token
                  key: authentik_host
            - name: AUTHENTIK_TOKEN
              valueFrom:
                secretKeyRef:
                  name: authentik-proxy-token
                  key: token
            - name: EXTERNAL_DOMAIN
              value: "k8s.home.geoffdavis.com"
            - name: AUTHENTIK_EXTERNAL_URL
              value: "https://authentik.k8s.home.geoffdavis.com"
          command:
            - /bin/sh
            - -c
            - |
              set -e
              echo "=== Installing Python Dependencies ==="
              pip install --no-cache-dir --target /tmp/python-packages urllib3
              export PYTHONPATH="/tmp/python-packages:$PYTHONPATH"

              echo "=== Creating OAuth2 Redirect Fix Script ==="
              cat > /tmp/fix_oauth2_redirects.py << 'EOF'
              #!/usr/bin/env python3
              """
              Fix OAuth2 Redirect URLs in Authentik Applications

              This script fixes OAuth2 application configurations to use external hostnames
              instead of internal cluster DNS names for redirect URLs.
              """

              import os
              import sys
              import json
              import time
              import logging
              import urllib.request
              import urllib.parse
              import urllib.error
              from typing import Dict, List, Optional, Tuple
              from dataclasses import dataclass


              @dataclass
              class ServiceConfig:
                  """Configuration for a service with OAuth2 redirect URLs."""
                  name: str
                  external_host: str
                  internal_host: str
                  internal_port: int

                  @property
                  def external_url(self) -> str:
                      return f"https://{self.external_host}"

                  @property
                  def internal_url(self) -> str:
                      return f"http://{self.internal_host}:{self.internal_port}"

                  @property
                  def oauth2_redirect_uris(self) -> List[str]:
                      """Generate OAuth2 redirect URIs for this service."""
                      return [
                          f"{self.external_url}/akprox/callback",
                          f"{self.external_url}/outpost.goauthentik.io/callback",
                          f"{self.external_url}/auth/callback",
                          f"{self.external_url}/oauth/callback"
                      ]


              @dataclass
              class AuthentikConfig:
                  """Authentik API configuration."""
                  host: str
                  token: str
                  external_domain: str
                  authentik_external_url: str


              class AuthentikAPIError(Exception):
                  """Custom exception for Authentik API errors."""
                  def __init__(self, message: str, status_code: Optional[int] = None,
                               response_body: Optional[str] = None):
                      super().__init__(message)
                      self.status_code = status_code
                      self.response_body = response_body


              class OAuth2RedirectFixer:
                  """Main class for fixing OAuth2 redirect URLs in Authentik applications."""

                  def __init__(self, config: AuthentikConfig, logger: Optional[logging.Logger] = None):
                      self.config = config
                      self.logger = logger or self._setup_logger()
                      self.session_headers = {
                          'Authorization': f'Bearer {config.token}',
                          'Content-Type': 'application/json',
                          'User-Agent': 'oauth2-redirect-fixer/1.0.0'
                      }

                      # Service configurations
                      self.services = [
                          ServiceConfig("longhorn", "longhorn.k8s.home.geoffdavis.com",
                                      "longhorn-frontend.longhorn-system", 80),
                          ServiceConfig("grafana", "grafana.k8s.home.geoffdavis.com",
                                      "kube-prometheus-stack-grafana.monitoring", 80),
                          ServiceConfig("prometheus", "prometheus.k8s.home.geoffdavis.com",
                                      "kube-prometheus-stack-prometheus.monitoring", 9090),
                          ServiceConfig("alertmanager", "alertmanager.k8s.home.geoffdavis.com",
                                      "kube-prometheus-stack-alertmanager.monitoring", 9093),
                          ServiceConfig("dashboard", "dashboard.k8s.home.geoffdavis.com",
                                      "kubernetes-dashboard-kong-proxy.kubernetes-dashboard", 443),
                          ServiceConfig("hubble", "hubble.k8s.home.geoffdavis.com",
                                      "hubble-ui.kube-system", 80),
                      ]

                  def _setup_logger(self) -> logging.Logger:
                      """Set up logging configuration."""
                      logger = logging.getLogger('oauth2-redirect-fixer')
                      logger.setLevel(logging.INFO)

                      if not logger.handlers:
                          handler = logging.StreamHandler(sys.stdout)
                          formatter = logging.Formatter(
                              '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
                          )
                          handler.setFormatter(formatter)
                          logger.addHandler(handler)

                      return logger

                  def _make_api_request(self, url: str, method: str = 'GET',
                                      data: Optional[Dict] = None, max_retries: int = 3) -> Tuple[int, Dict]:
                      """Make an API request to Authentik with retry logic."""
                      for attempt in range(max_retries):
                          try:
                              self.logger.debug(f"API call attempt {attempt + 1}/{max_retries}: {method} {url}")

                              # Prepare request
                              req_data = None
                              if data and method in ['POST', 'PATCH', 'PUT']:
                                  req_data = json.dumps(data).encode('utf-8')

                              request = urllib.request.Request(url, data=req_data,
                                                             headers=self.session_headers, method=method)

                              # Make request
                              with urllib.request.urlopen(request) as response:
                                  status_code = response.getcode()
                                  response_body = response.read().decode('utf-8')

                                  try:
                                      response_data = json.loads(response_body) if response_body else {}
                                  except json.JSONDecodeError:
                                      response_data = {'raw_response': response_body}

                                  self.logger.debug(f"API call successful: {status_code}")
                                  return status_code, response_data

                          except urllib.error.HTTPError as e:
                              status_code = e.code
                              try:
                                  error_body = e.read().decode('utf-8')
                                  error_data = json.loads(error_body) if error_body else {}
                              except (json.JSONDecodeError, UnicodeDecodeError):
                                  error_data = {'error': 'Failed to parse error response'}

                              self.logger.warning(f"API call failed with status {status_code}: {error_data}")

                              if attempt < max_retries - 1:
                                  wait_time = 2 ** attempt  # Exponential backoff
                                  self.logger.info(f"Retrying in {wait_time} seconds...")
                                  time.sleep(wait_time)
                              else:
                                  raise AuthentikAPIError(
                                      f"API request failed after {max_retries} attempts",
                                      status_code=status_code,
                                      response_body=str(error_data)
                                  )

                          except Exception as e:
                              self.logger.error(f"Unexpected error during API call: {e}")
                              if attempt < max_retries - 1:
                                  time.sleep(2 ** attempt)
                              else:
                                  raise AuthentikAPIError(f"API request failed: {str(e)}")

                  def test_authentication(self) -> bool:
                      """Test API authentication."""
                      try:
                          self.logger.info("Testing API authentication...")
                          url = f"{self.config.host}/api/v3/core/users/me/"
                          status_code, response = self._make_api_request(url)

                          if status_code == 200:
                              username = response.get('username', 'unknown')
                              self.logger.info(f"✓ API authentication successful (user: {username})")
                              return True
                          else:
                              self.logger.error(f"✗ API authentication failed with status {status_code}")
                              return False

                      except AuthentikAPIError as e:
                          self.logger.error(f"✗ API authentication failed: {e}")
                          return False

                  def get_oauth2_applications(self) -> Dict[str, Dict]:
                      """Get all OAuth2 applications from Authentik."""
                      try:
                          self.logger.info("Fetching OAuth2 applications...")
                          url = f"{self.config.host}/api/v3/core/applications/"
                          status_code, response = self._make_api_request(url)

                          if status_code == 200:
                              applications = {}
                              for app in response.get('results', []):
                                  applications[app['name']] = app

                              self.logger.info(f"✓ Found {len(applications)} applications")
                              return applications
                          else:
                              self.logger.error(f"✗ Failed to fetch applications: status {status_code}")
                              return {}

                      except AuthentikAPIError as e:
                          self.logger.error(f"✗ Failed to fetch applications: {e}")
                          return {}

                  def get_oauth2_providers(self) -> Dict[str, Dict]:
                      """Get all OAuth2 providers from Authentik."""
                      try:
                          self.logger.info("Fetching OAuth2 providers...")

                          # Get proxy providers
                          proxy_url = f"{self.config.host}/api/v3/providers/proxy/"
                          status_code, proxy_response = self._make_api_request(proxy_url)

                          if status_code != 200:
                              self.logger.error(f"✗ Failed to fetch proxy providers: status {status_code}")
                              return {}

                          # Get OAuth2 providers
                          oauth2_url = f"{self.config.host}/api/v3/providers/oauth2/"
                          status_code, oauth2_response = self._make_api_request(oauth2_url)

                          if status_code != 200:
                              self.logger.error(f"✗ Failed to fetch OAuth2 providers: status {status_code}")
                              return {}

                          providers = {}

                          # Process proxy providers
                          for provider in proxy_response.get('results', []):
                              providers[provider['name']] = {
                                  **provider,
                                  'provider_type': 'proxy'
                              }

                          # Process OAuth2 providers
                          for provider in oauth2_response.get('results', []):
                              providers[provider['name']] = {
                                  **provider,
                                  'provider_type': 'oauth2'
                              }

                          self.logger.info(f"✓ Found {len(providers)} providers")
                          return providers

                      except AuthentikAPIError as e:
                          self.logger.error(f"✗ Failed to fetch providers: {e}")
                          return {}

                  def fix_proxy_provider_external_host(self, provider: Dict, service: ServiceConfig) -> bool:
                      """Fix proxy provider external host URL."""
                      provider_id = provider['pk']
                      provider_name = provider['name']

                      try:
                          self.logger.info(f"Fixing proxy provider external host: {provider_name}")

                          # Check current external_host
                          current_external_host = provider.get('external_host', '')
                          if current_external_host == service.external_url:
                              self.logger.info(f"✓ Proxy provider {provider_name} already has correct external host")
                              return True

                          self.logger.info(f"Updating external host from '{current_external_host}' to '{service.external_url}'")

                          # Update proxy provider
                          update_data = {
                              **provider,
                              'external_host': service.external_url,
                              'internal_host': service.internal_url,
                              'internal_host_ssl_validation': False
                          }

                          # Remove read-only fields
                          for field in ['pk', 'component', 'assigned_application_slug', 'assigned_application_name']:
                              update_data.pop(field, None)

                          url = f"{self.config.host}/api/v3/providers/proxy/{provider_id}/"
                          status_code, response = self._make_api_request(url, method='PATCH', data=update_data)

                          if status_code == 200:
                              self.logger.info(f"✓ Updated proxy provider {provider_name} external host")
                              return True
                          else:
                              self.logger.error(f"✗ Failed to update proxy provider {provider_name}: status {status_code}")
                              return False

                      except AuthentikAPIError as e:
                          self.logger.error(f"✗ Failed to update proxy provider {provider_name}: {e}")
                          return False

                  def fix_oauth2_provider_redirect_uris(self, provider: Dict, service: ServiceConfig) -> bool:
                      """Fix OAuth2 provider redirect URIs."""
                      provider_id = provider['pk']
                      provider_name = provider['name']

                      try:
                          self.logger.info(f"Fixing OAuth2 provider redirect URIs: {provider_name}")

                          # Check current redirect URIs
                          current_redirect_uris = provider.get('redirect_uris', '')
                          expected_redirect_uris = '\n'.join(service.oauth2_redirect_uris)

                          if current_redirect_uris == expected_redirect_uris:
                              self.logger.info(f"✓ OAuth2 provider {provider_name} already has correct redirect URIs")
                              return True

                          self.logger.info(f"Updating redirect URIs for {provider_name}")
                          self.logger.info(f"Current: {current_redirect_uris}")
                          self.logger.info(f"Expected: {expected_redirect_uris}")

                          # Update OAuth2 provider
                          update_data = {
                              **provider,
                              'redirect_uris': expected_redirect_uris
                          }

                          # Remove read-only fields
                          for field in ['pk', 'component', 'assigned_application_slug', 'assigned_application_name']:
                              update_data.pop(field, None)

                          url = f"{self.config.host}/api/v3/providers/oauth2/{provider_id}/"
                          status_code, response = self._make_api_request(url, method='PATCH', data=update_data)

                          if status_code == 200:
                              self.logger.info(f"✓ Updated OAuth2 provider {provider_name} redirect URIs")
                              return True
                          else:
                              self.logger.error(f"✗ Failed to update OAuth2 provider {provider_name}: status {status_code}")
                              return False

                      except AuthentikAPIError as e:
                          self.logger.error(f"✗ Failed to update OAuth2 provider {provider_name}: {e}")
                          return False

                  def fix_application_launch_url(self, application: Dict, service: ServiceConfig) -> bool:
                      """Fix application launch URL."""
                      app_id = application['pk']
                      app_name = application['name']

                      try:
                          self.logger.info(f"Fixing application launch URL: {app_name}")

                          # Check current launch URL
                          current_launch_url = application.get('meta_launch_url', '')
                          expected_launch_url = service.external_url

                          if current_launch_url == expected_launch_url:
                              self.logger.info(f"✓ Application {app_name} already has correct launch URL")
                              return True

                          self.logger.info(f"Updating launch URL from '{current_launch_url}' to '{expected_launch_url}'")

                          # Update application
                          update_data = {
                              **application,
                              'meta_launch_url': expected_launch_url
                          }

                          # Remove read-only fields
                          for field in ['pk', 'provider_obj']:
                              update_data.pop(field, None)

                          url = f"{self.config.host}/api/v3/core/applications/{app_id}/"
                          status_code, response = self._make_api_request(url, method='PATCH', data=update_data)

                          if status_code == 200:
                              self.logger.info(f"✓ Updated application {app_name} launch URL")
                              return True
                          else:
                              self.logger.error(f"✗ Failed to update application {app_name}: status {status_code}")
                              return False

                      except AuthentikAPIError as e:
                          self.logger.error(f"✗ Failed to update application {app_name}: {e}")
                          return False

                  def fix_all_oauth2_redirects(self) -> bool:
                      """Fix OAuth2 redirect URLs for all services."""
                      self.logger.info("=== Starting OAuth2 Redirect URL Fix ===")

                      # Test authentication
                      if not self.test_authentication():
                          return False

                      # Get applications and providers
                      applications = self.get_oauth2_applications()
                      providers = self.get_oauth2_providers()

                      if not applications or not providers:
                          self.logger.error("✗ Failed to fetch applications or providers")
                          return False

                      success_count = 0
                      total_services = len(self.services)

                      # Fix each service
                      for service in self.services:
                          self.logger.info(f"=== Processing {service.name} ===")

                          service_success = True

                          # Find and fix proxy provider
                          proxy_provider_name = f"{service.name}-proxy"
                          if proxy_provider_name in providers:
                              provider = providers[proxy_provider_name]
                              if provider.get('provider_type') == 'proxy':
                                  if not self.fix_proxy_provider_external_host(provider, service):
                                      service_success = False
                              else:
                                  self.logger.warning(f"⚠ Provider {proxy_provider_name} is not a proxy provider")
                          else:
                              self.logger.warning(f"⚠ Proxy provider {proxy_provider_name} not found")

                          # Find and fix OAuth2 provider (if exists)
                          oauth2_provider_name = f"{service.name}-oauth2"
                          if oauth2_provider_name in providers:
                              provider = providers[oauth2_provider_name]
                              if provider.get('provider_type') == 'oauth2':
                                  if not self.fix_oauth2_provider_redirect_uris(provider, service):
                                      service_success = False
                              else:
                                  self.logger.warning(f"⚠ Provider {oauth2_provider_name} is not an OAuth2 provider")

                          # Find and fix application
                          if service.name in applications:
                              application = applications[service.name]
                              if not self.fix_application_launch_url(application, service):
                                  service_success = False
                          else:
                              self.logger.warning(f"⚠ Application {service.name} not found")

                          if service_success:
                              success_count += 1
                              self.logger.info(f"✓ Successfully processed {service.name}")
                          else:
                              self.logger.error(f"✗ Failed to process {service.name}")

                      # Summary
                      self.logger.info("=== OAuth2 Redirect URL Fix Complete ===")
                      self.logger.info(f"✓ Successfully processed {success_count}/{total_services} services")

                      if success_count == total_services:
                          self.logger.info("✓ All OAuth2 redirect URLs have been fixed")
                          self.logger.info("✓ Applications should now redirect to external hostnames")
                          return True
                      else:
                          self.logger.warning(f"⚠ {total_services - success_count} services had issues")
                          return False


              def main():
                  """Main entry point for the script."""
                  # Get configuration from environment variables
                  authentik_host = os.environ.get('AUTHENTIK_HOST')
                  authentik_token = os.environ.get('AUTHENTIK_TOKEN')
                  external_domain = os.environ.get('EXTERNAL_DOMAIN', 'k8s.home.geoffdavis.com')
                  authentik_external_url = os.environ.get('AUTHENTIK_EXTERNAL_URL', 'https://authentik.k8s.home.geoffdavis.com')

                  if not all([authentik_host, authentik_token]):
                      print("✗ Missing required environment variables:")
                      print("  - AUTHENTIK_HOST")
                      print("  - AUTHENTIK_TOKEN")
                      sys.exit(1)

                  # Create configuration
                  config = AuthentikConfig(
                      host=authentik_host,
                      token=authentik_token,
                      external_domain=external_domain,
                      authentik_external_url=authentik_external_url
                  )

                  # Create fixer and run
                  fixer = OAuth2RedirectFixer(config)

                  try:
                      success = fixer.fix_all_oauth2_redirects()
                      sys.exit(0 if success else 1)
                  except Exception as e:
                      fixer.logger.error(f"✗ Unexpected error: {e}")
                      sys.exit(1)


              if __name__ == "__main__":
                  main()
              EOF

              echo "=== Running OAuth2 Redirect Fix Script ==="
              python3 /tmp/fix_oauth2_redirects.py

              echo "=== OAuth2 Redirect Fix Complete ==="
      volumes: []
