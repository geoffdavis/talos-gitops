---
apiVersion: batch/v1
kind: Job
metadata:
  name: fix-dashboard-proxy-provider
  namespace: authentik
  labels:
    app.kubernetes.io/name: authentik-proxy
    app.kubernetes.io/component: configuration
spec:
  backoffLimit: 3
  activeDeadlineSeconds: 300
  template:
    metadata:
      labels:
        app.kubernetes.io/name: authentik-proxy
        app.kubernetes.io/component: configuration
    spec:
      restartPolicy: OnFailure
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: fix-dashboard-proxy
          image: curlimages/curl:8.16.0
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: AUTHENTIK_HOST
              value: "http://authentik-server.authentik.svc.cluster.local"
            - name: AUTHENTIK_TOKEN
              valueFrom:
                secretKeyRef:
                  name: authentik-admin-token
                  key: token
          command:
            - /bin/sh
            - -c
            - |
              set -e
              echo "Fixing Dashboard proxy provider configuration..."

              # Test authentication
              echo "Testing authentication..."
              response=$(curl -s -w "%{http_code}" -o /tmp/auth_test \
                -H "Authorization: Bearer ${AUTHENTIK_TOKEN}" \
                "${AUTHENTIK_HOST}/api/v3/core/users/me/")

              if [ "$response" != "200" ]; then
                echo "ERROR: Authentication failed with status $response"
                cat /tmp/auth_test
                exit 1
              fi
              echo "Authentication successful"

              # Find the dashboard proxy provider
              echo "Finding dashboard proxy provider..."
              response=$(curl -s -w "%{http_code}" -o /tmp/providers \
                -H "Authorization: Bearer ${AUTHENTIK_TOKEN}" \
                "${AUTHENTIK_HOST}/api/v3/providers/proxy/")

              if [ "$response" != "200" ]; then
                echo "ERROR: Failed to get providers with status $response"
                cat /tmp/providers
                exit 1
              fi

              # Extract dashboard provider PK
              PROVIDER_PK=$(cat /tmp/providers | grep -A20 '"name":"dashboard-proxy"' | grep -o '"pk":[0-9]*' | cut -d':' -f2)

              if [ -z "$PROVIDER_PK" ]; then
                echo "ERROR: Dashboard proxy provider not found"
                cat /tmp/providers
                exit 1
              fi

              echo "Found dashboard proxy provider with PK: $PROVIDER_PK"

              # Update the provider with correct internal host
              echo "Updating dashboard proxy provider..."
              UPDATE_DATA='{
                "internal_host": "http://kubernetes-dashboard-web.kubernetes-dashboard.svc.cluster.local:8000",
                "internal_host_ssl_validation": false
              }'

              response=$(curl -s -w "%{http_code}" -o /tmp/update_result \
                -X PATCH \
                -H "Authorization: Bearer ${AUTHENTIK_TOKEN}" \
                -H "Content-Type: application/json" \
                -d "$UPDATE_DATA" \
                "${AUTHENTIK_HOST}/api/v3/providers/proxy/${PROVIDER_PK}/")

              if [ "$response" = "200" ]; then
                echo "âœ… Successfully updated dashboard proxy provider!"
                echo "Updated internal_host to: kubernetes-dashboard-web.kubernetes-dashboard.svc.cluster.local:8000"
              else
                echo "ERROR: Failed to update provider with status $response"
                cat /tmp/update_result
                exit 1
              fi

              echo "Dashboard proxy provider fix completed successfully!"
