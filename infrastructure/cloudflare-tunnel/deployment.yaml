apiVersion: apps/v1
kind: Deployment
metadata:
  name: cloudflare-tunnel
  namespace: cloudflare-tunnel
  labels:
    app: cloudflare-tunnel
spec:
  replicas: 2
  selector:
    matchLabels:
      app: cloudflare-tunnel
  template:
    metadata:
      labels:
        app: cloudflare-tunnel
    spec:
      serviceAccountName: cloudflare-tunnel
      securityContext:
        runAsNonRoot: true
        runAsUser: 65532
        runAsGroup: 65532
        fsGroup: 65532
      containers:
        - name: cloudflared
          image: cloudflare/cloudflared:2025.7.0
          args:
            - tunnel
            - --config
            - /etc/cloudflared/config/config.yaml
            - run
          ports:
            - name: metrics
              containerPort: 2000
              protocol: TCP
          env:
            - name: TUNNEL_METRICS
              value: "0.0.0.0:2000"
            - name: TUNNEL_TRANSPORT_PROTOCOL
              value: "quic"
            - name: TUNNEL_POST_QUANTUM
              value: "true"
          volumeMounts:
            - name: config
              mountPath: /etc/cloudflared/config
              readOnly: true
            - name: creds
              mountPath: /etc/cloudflared/creds
              readOnly: true
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 10m
              memory: 64Mi
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
          livenessProbe:
            httpGet:
              path: /ready
              port: 2000
            failureThreshold: 1
            initialDelaySeconds: 10
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /ready
              port: 2000
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
      volumes:
        - name: config
          configMap:
            name: cloudflare-tunnel-config
            items:
              - key: config.yaml
                path: config.yaml
        - name: creds
          secret:
            secretName: cloudflare-tunnel-credentials
            items:
              - key: credentials.json
                path: credentials.json
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - key: node-role.kubernetes.io/control-plane
          operator: Exists
          effect: NoSchedule
        - key: node-role.kubernetes.io/master
          operator: Exists
          effect: NoSchedule
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - cloudflare-tunnel
                topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cloudflare-tunnel
  namespace: cloudflare-tunnel
  labels:
    app: cloudflare-tunnel
---
apiVersion: v1
kind: Service
metadata:
  name: cloudflare-tunnel-metrics
  namespace: cloudflare-tunnel
  labels:
    app: cloudflare-tunnel
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "2000"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
    - name: metrics
      port: 2000
      targetPort: 2000
      protocol: TCP
  selector:
    app: cloudflare-tunnel
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: cloudflare-tunnel
  namespace: cloudflare-tunnel
  labels:
    app: cloudflare-tunnel
spec:
  selector:
    matchLabels:
      app: cloudflare-tunnel
  endpoints:
    - port: metrics
      interval: 30s
      path: /metrics
