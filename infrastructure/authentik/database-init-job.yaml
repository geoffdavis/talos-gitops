apiVersion: batch/v1
kind: Job
metadata:
  name: authentik-database-init
  namespace: authentik
  labels:
    app.kubernetes.io/name: authentik
    app.kubernetes.io/component: database-init
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-weight: "-1"
spec:
  ttlSecondsAfterFinished: 300
  template:
    metadata:
      labels:
        app.kubernetes.io/name: authentik
        app.kubernetes.io/component: database-init
    spec:
      restartPolicy: OnFailure
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: database-init
          image: postgres:16.4-alpine
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
          env:
            - name: PGHOST
              value: "postgresql-cluster-rw.postgresql-system.svc.cluster.local"
            - name: PGPORT
              value: "5432"
            - name: PGDATABASE
              value: "postgres"
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  name: postgresql-superuser-credentials
                  key: username
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgresql-superuser-credentials
                  key: password
            - name: AUTHENTIK_DB_USER
              valueFrom:
                secretKeyRef:
                  name: authentik-database-credentials
                  key: AUTHENTIK_POSTGRESQL__USER
            - name: AUTHENTIK_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: authentik-database-credentials
                  key: AUTHENTIK_POSTGRESQL__PASSWORD
            - name: PGSSLMODE
              value: "require"
          command:
            - /bin/sh
            - -c
            - |
              set -e
              echo "Connecting to PostgreSQL cluster..."
              
              # Check if database exists
              DB_EXISTS=$(psql -tAc "SELECT 1 FROM pg_database WHERE datname='authentik';" || echo "0")
              
              if [ "$DB_EXISTS" != "1" ]; then
                echo "Creating authentik database..."
                psql -c "CREATE DATABASE authentik OWNER ${AUTHENTIK_DB_USER};"
                echo "Database created successfully"
              else
                echo "Database authentik already exists"
              fi
              
              # Check if user exists
              USER_EXISTS=$(psql -tAc "SELECT 1 FROM pg_roles WHERE rolname='${AUTHENTIK_DB_USER}';" || echo "0")
              
              if [ "$USER_EXISTS" != "1" ]; then
                echo "Creating authentik user..."
                psql -c "CREATE USER ${AUTHENTIK_DB_USER} WITH PASSWORD '${AUTHENTIK_DB_PASSWORD}';"
                echo "User created successfully"
              else
                echo "User ${AUTHENTIK_DB_USER} already exists"
                echo "Updating password..."
                psql -c "ALTER USER ${AUTHENTIK_DB_USER} WITH PASSWORD '${AUTHENTIK_DB_PASSWORD}';"
              fi
              
              # Grant permissions
              echo "Granting permissions..."
              psql -c "GRANT ALL PRIVILEGES ON DATABASE authentik TO ${AUTHENTIK_DB_USER};"
              psql -d authentik -c "GRANT ALL ON SCHEMA public TO ${AUTHENTIK_DB_USER};"
              psql -d authentik -c "GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO ${AUTHENTIK_DB_USER};"
              psql -d authentik -c "GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO ${AUTHENTIK_DB_USER};"
              psql -d authentik -c "ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO ${AUTHENTIK_DB_USER};"
              psql -d authentik -c "ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO ${AUTHENTIK_DB_USER};"
              
              echo "Database initialization completed successfully"
          volumeMounts:
            - name: tmp
              mountPath: /tmp
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "128Mi"
              cpu: "100m"
      volumes:
        - name: tmp
          emptyDir: {}
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - key: node-role.kubernetes.io/control-plane
          operator: Exists
          effect: NoSchedule
        - key: node-role.kubernetes.io/master
          operator: Exists
          effect: NoSchedule