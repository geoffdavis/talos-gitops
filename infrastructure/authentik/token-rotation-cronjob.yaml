---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: authentik-token-rotation
  namespace: authentik
  labels:
    app.kubernetes.io/name: authentik-token-rotation
    app.kubernetes.io/component: token-management
    app.kubernetes.io/part-of: authentik
  annotations:
    flux.weave.works/automated: "false"
spec:
  # Run daily at 2 AM UTC
  schedule: "0 2 * * *"
  timeZone: "UTC"
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 5
  startingDeadlineSeconds: 300
  jobTemplate:
    metadata:
      labels:
        app.kubernetes.io/name: authentik-token-rotation
        app.kubernetes.io/component: token-management
    spec:
      backoffLimit: 3
      activeDeadlineSeconds: 1800 # 30 minutes
      template:
        metadata:
          labels:
            app.kubernetes.io/name: authentik-token-rotation
            app.kubernetes.io/component: token-management
        spec:
          restartPolicy: OnFailure
          securityContext:
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
            seccompProfile:
              type: RuntimeDefault
          serviceAccountName: authentik-token-rotation
          containers:
            - name: token-rotation
              image: python:3.12-slim
              securityContext:
                allowPrivilegeEscalation: false
                runAsNonRoot: true
                runAsUser: 65534
                runAsGroup: 65534
                capabilities:
                  drop:
                    - ALL
                seccompProfile:
                  type: RuntimeDefault
                readOnlyRootFilesystem: true
              env:
                - name: NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                - name: ROTATION_ENABLED
                  valueFrom:
                    configMapKeyRef:
                      name: authentik-token-rotation-config
                      key: rotation_enabled
                      optional: true
                - name: OVERLAP_DAYS
                  valueFrom:
                    configMapKeyRef:
                      name: authentik-token-rotation-config
                      key: overlap_days
                      optional: true
                - name: WARNING_DAYS
                  valueFrom:
                    configMapKeyRef:
                      name: authentik-token-rotation-config
                      key: warning_days
                      optional: true
                - name: VALIDATION_ENABLED
                  valueFrom:
                    configMapKeyRef:
                      name: authentik-token-rotation-config
                      key: validation_enabled
                      optional: true
                - name: NOTIFICATION_ENABLED
                  valueFrom:
                    configMapKeyRef:
                      name: authentik-token-rotation-config
                      key: notification_enabled
                      optional: true
                - name: NOTIFICATION_WEBHOOK
                  valueFrom:
                    configMapKeyRef:
                      name: authentik-token-rotation-config
                      key: notification_webhook
                      optional: true
              volumeMounts:
                - name: token-manager-script
                  mountPath: /app
                  readOnly: true
                - name: tmp
                  mountPath: /tmp
                - name: pip-cache
                  mountPath: /home/nobody/.local
              workingDir: /app
              command:
                - /bin/bash
                - -c
                - |
                  set -euo pipefail

                  echo "=== Authentik Token Rotation Job ==="
                  echo "Starting token rotation check at $(date -u)"

                  # Install dependencies to writable volume
                  pip install --target /home/nobody/.local/lib/python3.12/site-packages requests pyyaml
                  export PYTHONPATH="/home/nobody/.local/lib/python3.12/site-packages:${PYTHONPATH:-}"

                  # Set Python path
                  export PYTHONPATH="/app:$PYTHONPATH"

                  # Check if rotation is enabled
                  if [[ "${ROTATION_ENABLED:-true}" != "true" ]]; then
                    echo "Token rotation is disabled, skipping..."
                    exit 0
                  fi

                  # Run token rotation check
                  echo "Checking token expiry status..."
                  python /app/authentik_token_manager.py list --json > /tmp/token_status.json

                  # Parse token status and determine if rotation is needed
                  python -c "
                  import json
                  import sys
                  from datetime import datetime

                  overlap_days = int('${OVERLAP_DAYS:-30}')
                  warning_days = int('${WARNING_DAYS:-60}')

                  with open('/tmp/token_status.json', 'r') as f:
                      tokens = json.load(f)

                  rotation_needed = False
                  warning_needed = False

                  for token in tokens:
                      if token.get('days_remaining'):
                          days = token['days_remaining']
                          if days <= overlap_days:
                              print(f'Token {token[\"key\"]} expires in {days} days - rotation needed')
                              rotation_needed = True
                          elif days <= warning_days:
                              print(f'Token {token[\"key\"]} expires in {days} days - warning')
                              warning_needed = True

                  if rotation_needed:
                      print('ROTATION_NEEDED=true')
                      sys.exit(10)  # Special exit code for rotation needed
                  elif warning_needed:
                      print('WARNING_NEEDED=true')
                      sys.exit(20)  # Special exit code for warning
                  else:
                      print('No action needed')
                      sys.exit(0)
                  " || rotation_status=$?

                  case $rotation_status in
                    10)
                      echo "Token rotation is needed, starting rotation process..."
                      python /app/authentik_token_manager.py rotate --overlap-days ${OVERLAP_DAYS:-30}
                      if [[ $? -eq 0 ]]; then
                        echo "Token rotation completed successfully"
                        if [[ "${NOTIFICATION_ENABLED:-true}" == "true" && -n "${NOTIFICATION_WEBHOOK:-}" ]]; then
                          curl -X POST "${NOTIFICATION_WEBHOOK}" \
                            -H "Content-Type: application/json" \
                            -d '{"text":"✅ Authentik token rotation completed successfully","timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}' || true
                        fi
                      else
                        echo "Token rotation failed"
                        if [[ "${NOTIFICATION_ENABLED:-true}" == "true" && -n "${NOTIFICATION_WEBHOOK:-}" ]]; then
                          curl -X POST "${NOTIFICATION_WEBHOOK}" \
                            -H "Content-Type: application/json" \
                            -d '{"text":"❌ Authentik token rotation failed","timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}' || true
                        fi
                        exit 1
                      fi
                      ;;
                    20)
                      echo "Token expiry warning - no rotation needed yet"
                      if [[ "${NOTIFICATION_ENABLED:-true}" == "true" && -n "${NOTIFICATION_WEBHOOK:-}" ]]; then
                        curl -X POST "${NOTIFICATION_WEBHOOK}" \
                          -H "Content-Type: application/json" \
                          -d '{"text":"⚠️ Authentik token will expire soon","timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}' || true
                      fi
                      ;;
                    0)
                      echo "All tokens are healthy"
                      ;;
                    *)
                      echo "Unexpected status check result: $rotation_status"
                      exit 1
                      ;;
                  esac

                  echo "Token rotation job completed at $(date -u)"
              resources:
                requests:
                  memory: "128Mi"
                  cpu: "100m"
                limits:
                  memory: "256Mi"
                  cpu: "200m"
          volumes:
            - name: token-manager-script
              configMap:
                name: authentik-token-manager-script
                defaultMode: 0755
            - name: tmp
              emptyDir: {}
            - name: pip-cache
              emptyDir: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: authentik-token-rotation
  namespace: authentik
  labels:
    app.kubernetes.io/name: authentik-token-rotation
    app.kubernetes.io/component: token-management
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: authentik-token-rotation
  namespace: authentik
  labels:
    app.kubernetes.io/name: authentik-token-rotation
    app.kubernetes.io/component: token-management
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch", "patch", "update"]
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["batch"]
    resources: ["jobs"]
    verbs: ["create", "get", "list", "watch", "delete"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["pods/log"]
    verbs: ["get"]
  - apiGroups: ["apps"]
    resources: ["deployments"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["pods/exec"]
    verbs: ["create"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: authentik-token-rotation
  namespace: authentik
  labels:
    app.kubernetes.io/name: authentik-token-rotation
    app.kubernetes.io/component: token-management
subjects:
  - kind: ServiceAccount
    name: authentik-token-rotation
    namespace: authentik
roleRef:
  kind: Role
  name: authentik-token-rotation
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: authentik-token-manager-script
  namespace: authentik
  labels:
    app.kubernetes.io/name: authentik-token-rotation
    app.kubernetes.io/component: token-management
data:
  authentik_token_manager.py: |
    #!/usr/bin/env python3
    """
    Authentik Token Manager - Updates 1Password with current Authentik tokens
    """
    import json
    import sys
    import argparse
    import subprocess
    from datetime import datetime, timedelta

    def run_command(cmd, capture_output=True):
        """Run a shell command and return the result"""
        try:
            result = subprocess.run(cmd, shell=True, capture_output=capture_output, text=True, check=True)
            return result.stdout.strip() if capture_output else None
        except subprocess.CalledProcessError as e:
            print(f"Command failed: {cmd}")
            print(f"Error: {e.stderr}")
            raise

    def get_current_token():
        """Get the current token from the enhanced token setup job logs"""
        try:
            # Get the most recent enhanced token setup job by name pattern
            cmd = "kubectl get jobs -n authentik -o jsonpath='{.items[?(@.metadata.name==\"authentik-enhanced-token-setup\")].metadata.name}'"
            job_name = run_command(cmd)
            
            if not job_name:
                print("No enhanced token setup job found")
                return None
            
            # Get the logs from the job
            cmd = f"kubectl logs job/{job_name} -n authentik"
            logs = run_command(cmd)
            
            # Extract token from logs
            for line in logs.split('\n'):
                if 'Token (base64):' in line:
                    token_b64 = line.split('Token (base64): ')[1].strip()
                    # Decode base64 token
                    import base64
                    token = base64.b64decode(token_b64).decode()
                    return token
                    
            print("Token not found in job logs")
            return None
            
        except Exception as e:
            print(f"Error getting current token: {e}")
            return None

    def update_onepassword(token):
        """Update 1Password with the new token using 1Password Connect API"""
        try:
            # Use kubectl to get the 1Password Connect service
            connect_url = "http://onepassword-connect.onepassword-connect.svc.cluster.local:8080"
            
            # Get the connect token from the secret
            cmd = "kubectl get secret onepassword-connect-token -n onepassword-connect -o jsonpath='{.data.token}' | base64 -d"
            connect_token = run_command(cmd)
            
            if not connect_token:
                print("Could not get 1Password Connect token")
                return False
            
            # Update the item using curl (since requests isn't available yet)
            item_id = "Authentik Admin Token"
            
            # Create the update payload
            update_data = {
                "fields": [
                    {
                        "id": "token",
                        "value": token
                    }
                ]
            }
            
            # Write the data to a temp file
            with open('/tmp/update_data.json', 'w') as f:
                json.dump(update_data, f)
            
            # Use curl to update the item
            cmd = f"""curl -s -X PATCH "{connect_url}/v1/vaults/homelab/items/{item_id}" \
                -H "Authorization: Bearer {connect_token}" \
                -H "Content-Type: application/json" \
                -d @/tmp/update_data.json"""
            
            result = run_command(cmd)
            print(f"1Password update result: {result}")
            return True
            
        except Exception as e:
            print(f"Error updating 1Password: {e}")
            return False

    def list_tokens():
        """List current token status"""
        token = get_current_token()
        if token:
            # For now, just return basic info
            return [{
                "key": token[:8] + "...",
                "days_remaining": 365,  # New tokens have 1 year
                "status": "active"
            }]
        return []

    def rotate_tokens(overlap_days=30):
        """Rotate tokens by updating 1Password with current token"""
        print("Starting token rotation...")
        
        # Get current token
        token = get_current_token()
        if not token:
            print("Could not get current token")
            return False
        
        print(f"Found token: {token[:8]}...")
        
        # Update 1Password
        if update_onepassword(token):
            print("Successfully updated 1Password with new token")
            return True
        else:
            print("Failed to update 1Password")
            return False

    def main():
        parser = argparse.ArgumentParser(description='Authentik Token Manager')
        parser.add_argument('command', choices=['list', 'rotate'], help='Command to execute')
        parser.add_argument('--json', action='store_true', help='Output in JSON format')
        parser.add_argument('--overlap-days', type=int, default=30, help='Overlap days for rotation')
        
        args = parser.parse_args()
        
        if args.command == 'list':
            tokens = list_tokens()
            if args.json:
                print(json.dumps(tokens))
            else:
                for token in tokens:
                    print(f"Token: {token['key']}, Days remaining: {token['days_remaining']}")
        
        elif args.command == 'rotate':
            success = rotate_tokens(args.overlap_days)
            sys.exit(0 if success else 1)

    if __name__ == '__main__':
        main()
