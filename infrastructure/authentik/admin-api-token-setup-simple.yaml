---
apiVersion: batch/v1
kind: Job
metadata:
  name: authentik-admin-api-token-setup-simple
  namespace: authentik
  labels:
    app.kubernetes.io/name: authentik
    app.kubernetes.io/component: admin-api-token-setup
    app.kubernetes.io/part-of: authentik
spec:
  ttlSecondsAfterFinished: 300
  backoffLimit: 3
  template:
    metadata:
      labels:
        app.kubernetes.io/name: authentik
        app.kubernetes.io/component: admin-api-token-setup
    spec:
      restartPolicy: Never
      serviceAccountName: authentik
      containers:
        - name: setup-admin-token
          image: curlimages/curl:8.5.0
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            capabilities:
              drop:
                - ALL
          env:
            - name: OP_CONNECT_HOST
              value: "http://onepassword-connect.onepassword-connect.svc.cluster.local:8080"
            - name: OP_CONNECT_TOKEN
              valueFrom:
                secretKeyRef:
                  name: onepassword-connect-token
                  key: token
            - name: VAULT_UUID
              value: "k6vqhqjjpbgwjbryaadqzj2e5u"
            - name: CLUSTER_NAME
              value: "home-ops"
            - name: AUTHENTIK_HOST
              value: "http://authentik-server.authentik.svc.cluster.local"
            - name: ADMIN_USERNAME
              valueFrom:
                secretKeyRef:
                  name: authentik-admin-credentials
                  key: username
            - name: ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: authentik-admin-credentials
                  key: password
          command:
            - /bin/sh
            - -c
            - |
              set -e
              echo "=== Setting up Authentik Admin API Token for cluster: $CLUSTER_NAME ==="

              # Wait for authentik to be ready
              echo "Waiting for Authentik server to be ready..."
              max_attempts=20
              attempt=0
              while [ $attempt -lt $max_attempts ]; do
                if curl -f -s "$AUTHENTIK_HOST/if/flow/initial-setup/" > /dev/null 2>&1; then
                  echo "Authentik server is ready!"
                  break
                fi
                attempt=$((attempt + 1))
                echo "Authentik not ready yet, attempt $attempt/$max_attempts, waiting 10 seconds..."
                sleep 10
              done

              if [ $attempt -eq $max_attempts ]; then
                echo "ERROR: Authentik server did not become ready within $((max_attempts * 10)) seconds"
                exit 1
              fi

              # Check if admin API token already exists in 1Password
              ITEM_NAME="Authentik Admin API Token - $CLUSTER_NAME"
              echo "Checking if admin API token already exists in 1Password..."

              ITEM_EXISTS=$(curl -s -H "Authorization: Bearer $OP_CONNECT_TOKEN" \
                "$OP_CONNECT_HOST/v1/vaults/$VAULT_UUID/items" | \
                grep -c "$ITEM_NAME" || echo "0")

              if [ "$ITEM_EXISTS" -gt 0 ]; then
                echo "Admin API token item already exists in 1Password: $ITEM_NAME"
                
                # Get existing item to check if it has a valid token
                ITEM_ID=$(curl -s -H "Authorization: Bearer $OP_CONNECT_TOKEN" \
                  "$OP_CONNECT_HOST/v1/vaults/$VAULT_UUID/items" | \
                  grep -A 10 -B 10 "$ITEM_NAME" | \
                  grep '"id"' | head -1 | sed 's/.*"id": *"\([^"]*\)".*/\1/')
                
                if [ -n "$ITEM_ID" ]; then
                  # Get current token value
                  CURRENT_TOKEN=$(curl -s -H "Authorization: Bearer $OP_CONNECT_TOKEN" \
                    "$OP_CONNECT_HOST/v1/vaults/$VAULT_UUID/items/$ITEM_ID" | \
                    grep -A 5 '"label": *"token"' | grep '"value"' | sed 's/.*"value": *"\([^"]*\)".*/\1/')
                  
                  # Test if current token is valid
                  if [ -n "$CURRENT_TOKEN" ] && [ "$CURRENT_TOKEN" != "ak-placeholder-admin-token-will-be-set-manually" ]; then
                    echo "Testing existing token..."
                    if curl -s -H "Authorization: Bearer $CURRENT_TOKEN" "$AUTHENTIK_HOST/api/v3/core/users/me/" | grep -q '"username"'; then
                      echo "Existing token is valid, skipping token creation"
                      exit 0
                    else
                      echo "Existing token is invalid, will create new one"
                    fi
                  else
                    echo "No valid token found, will create new one"
                  fi
                fi
              fi

              # Get session token by logging in with admin credentials
              echo "Logging in with admin credentials to get session token..."

              # First, get the login flow
              LOGIN_FLOW=$(curl -s "$AUTHENTIK_HOST/api/v3/flows/instances/default-authentication-flow/" | \
                grep '"pk"' | head -1 | sed 's/.*"pk": *"\([^"]*\)".*/\1/')

              if [ -z "$LOGIN_FLOW" ]; then
                echo "ERROR: Could not find login flow"
                exit 1
              fi

              echo "Found login flow: $LOGIN_FLOW"

              # Create a session and get CSRF token
              SESSION_RESPONSE=$(curl -s -c /tmp/cookies.txt -b /tmp/cookies.txt \
                "$AUTHENTIK_HOST/if/flow/$LOGIN_FLOW/")

              CSRF_TOKEN=$(echo "$SESSION_RESPONSE" | grep 'csrfmiddlewaretoken' | \
                sed 's/.*value="\([^"]*\)".*/\1/' | head -1)

              if [ -z "$CSRF_TOKEN" ]; then
                echo "ERROR: Could not get CSRF token"
                exit 1
              fi

              echo "Got CSRF token: ${CSRF_TOKEN:0:20}..."

              # Login with admin credentials
              LOGIN_RESPONSE=$(curl -s -c /tmp/cookies.txt -b /tmp/cookies.txt \
                -X POST \
                -H "Content-Type: application/x-www-form-urlencoded" \
                -H "Referer: $AUTHENTIK_HOST/if/flow/$LOGIN_FLOW/" \
                -d "csrfmiddlewaretoken=$CSRF_TOKEN&uid_field=$ADMIN_USERNAME&password=$ADMIN_PASSWORD" \
                "$AUTHENTIK_HOST/if/flow/$LOGIN_FLOW/")

              # Get session token from cookies
              SESSION_TOKEN=$(grep 'authentik_session' /tmp/cookies.txt | cut -f7)

              if [ -z "$SESSION_TOKEN" ]; then
                echo "ERROR: Could not get session token after login"
                exit 1
              fi

              echo "Successfully logged in, got session token"

              # Now get admin user ID using session
              ADMIN_USER_ID=$(curl -s -b /tmp/cookies.txt \
                "$AUTHENTIK_HOST/api/v3/core/users/" | \
                grep -A 10 '"username": *"'$ADMIN_USERNAME'"' | \
                grep '"pk"' | head -1 | sed 's/.*"pk": *\([0-9]*\).*/\1/')

              if [ -z "$ADMIN_USER_ID" ]; then
                echo "ERROR: Could not find admin user ID"
                exit 1
              fi

              echo "Found admin user ID: $ADMIN_USER_ID"

              # Create API token using session
              TOKEN_RESPONSE=$(curl -s -b /tmp/cookies.txt \
                -X POST \
                -H "Content-Type: application/json" \
                -H "X-CSRFToken: $CSRF_TOKEN" \
                "$AUTHENTIK_HOST/api/v3/core/tokens/" \
                -d '{
                  "identifier": "admin-api-token-'$CLUSTER_NAME'",
                  "description": "Admin API Token for internal server operations on '$CLUSTER_NAME' cluster",
                  "user": '$ADMIN_USER_ID',
                  "expires": null,
                  "expiring": false
                }')

              # Extract the token from response
              NEW_TOKEN=$(echo "$TOKEN_RESPONSE" | grep '"key"' | sed 's/.*"key": *"\([^"]*\)".*/\1/')

              if [ -z "$NEW_TOKEN" ]; then
                echo "ERROR: Failed to create API token"
                echo "Response: $TOKEN_RESPONSE"
                exit 1
              fi

              echo "Successfully created new API token: ${NEW_TOKEN:0:20}..."

              # Test the new token
              echo "Testing new token..."
              if ! curl -s -H "Authorization: Bearer $NEW_TOKEN" "$AUTHENTIK_HOST/api/v3/core/users/me/" | grep -q '"username"'; then
                echo "ERROR: New token is not working"
                exit 1
              fi

              echo "New token is working correctly"

              # Store/update token in 1Password
              if [ "$ITEM_EXISTS" -gt 0 ] && [ -n "$ITEM_ID" ]; then
                echo "Updating existing 1Password item with new token..."
                curl -X PATCH -H "Authorization: Bearer $OP_CONNECT_TOKEN" \
                  -H "Content-Type: application/json" \
                  "$OP_CONNECT_HOST/v1/vaults/$VAULT_UUID/items/$ITEM_ID" \
                  -d '{
                    "fields": [
                      {
                        "label": "token",
                        "type": "CONCEALED",
                        "value": "'$NEW_TOKEN'"
                      },
                      {
                        "label": "created",
                        "type": "STRING",
                        "value": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
                      },
                      {
                        "label": "expires",
                        "type": "STRING",
                        "value": "never"
                      },
                      {
                        "label": "description",
                        "type": "STRING",
                        "value": "Authentik Admin API Token for internal server operations on '$CLUSTER_NAME' cluster"
                      }
                    ]
                  }'
                echo "Updated existing 1Password item"
              else
                echo "Creating new 1Password item with token..."
                curl -X POST -H "Authorization: Bearer $OP_CONNECT_TOKEN" \
                  -H "Content-Type: application/json" \
                  "$OP_CONNECT_HOST/v1/vaults/$VAULT_UUID/items" \
                  -d '{
                    "title": "'$ITEM_NAME'",
                    "category": "API_CREDENTIAL",
                    "tags": ["authentik", "admin", "api", "'$CLUSTER_NAME'"],
                    "fields": [
                      {
                        "label": "token",
                        "type": "CONCEALED",
                        "value": "'$NEW_TOKEN'"
                      },
                      {
                        "label": "created",
                        "type": "STRING",
                        "value": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"
                      },
                      {
                        "label": "expires",
                        "type": "STRING",
                        "value": "never"
                      },
                      {
                        "label": "description",
                        "type": "STRING",
                        "value": "Authentik Admin API Token for internal server operations on '$CLUSTER_NAME' cluster"
                      }
                    ]
                  }'
                echo "Created new 1Password item"
              fi

              echo "=== Admin API Token Setup Complete ==="
              echo "Token has been automatically generated and stored in 1Password"
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      tolerations:
        - key: node-role.kubernetes.io/control-plane
          operator: Exists
          effect: NoSchedule
        - key: node-role.kubernetes.io/master
          operator: Exists
          effect: NoSchedule
